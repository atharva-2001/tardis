============================= test session starts ==============================
platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
rootdir: /home/aryaatharva18/tardis-main/tardis
configfile: pyproject.toml
plugins: doctestplus-1.2.1, anyio-4.4.0, cov-5.0.0, metadata-3.1.1, html-4.1.1
collected 1796 items / 2 deselected / 1794 selected

tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
tardis/grid/tests/test_grid.py .                                         [  2%]
tardis/gui/tests/test_gui.py s                                           [  2%]
tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
tardis/io/tests/test_atomic.py .....                                     [  7%]
tardis/io/tests/test_decay.py ..                                         [  7%]
tardis/io/tests/test_model_reader.py ......                              [  7%]
tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
tardis/model/tests/test_base.py ........................................ [ 10%]
............                                                             [ 10%]
tardis/model/tests/test_csvy_model.py .........                          [ 11%]
tardis/model/tests/test_density.py ..                                    [ 11%]
tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
tardis/plasma/tests/test_complete_plasmas.py ...........FFF..FFF..s..... [ 13%]
sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FF [ 18%]
F..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss.... [ 22%]
........s...FFF..FFF.ss.....sFF.F....ss............s...FFF..FFF.ss.....s [ 26%]
FF.F....ss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF [ 30%]
..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFssFssssss..... [ 34%]
.......s...FFF..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sF [ 38%]
F.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF. [ 42%]
.FFF.ss.....sFF.Fssssss............s...FFF..FFF.s.....FFFF.Fssssss...... [ 46%]
......s...FFF..FFF.s.....FFFF.Fssssss............s...FFF..FFF.s.....FFFF [ 50%]
.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF.. [ 54%]
FFF.ss.....sFF.Fssssss................FFF..FFF..s.....sFF.Fssss......... [ 58%]
.........FFF..FFF..s.....sFF.Fssss.......                                [ 60%]
tardis/plasma/tests/test_hdf_plasma.py ....F..F....F.F..........FFF..... [ 62%]
......                                                                   [ 62%]
tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
tardis/plasma/tests/test_plasma_vboundary.py .............               [ 63%]
tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
tardis/simulation/tests/test_convergence.py .....                        [ 64%]
tardis/simulation/tests/test_simulation.py FFFFFFFFFF...                 [ 65%]
tardis/spectrum/tests/test_cuda_formal_integral.py ..................... [ 66%]
.............................                                            [ 67%]
tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
..........                                                               [ 69%]
tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
.........                                                                [ 72%]
tardis/spectrum/tests/test_spectrum_solver.py .FFF                       [ 72%]
tardis/tests/test_tardis_full.py .FFF                                    [ 72%]
tardis/tests/test_tardis_full_formal_integral.py .FFF.FFF.FFF.FFF        [ 73%]
tardis/tests/test_util.py .............................................  [ 75%]
tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py xFF       [ 81%]
tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
XX.........                                                              [ 84%]
tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
.....                                                                    [ 85%]
tardis/transport/montecarlo/tests/test_rpacket_tracker.py ....F.         [ 85%]
tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py F [ 86%]
                                                                         [ 86%]
tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
......                                                                   [ 88%]
tardis/visualization/tools/tests/test_liv_plot.py ...F..F..F..F..F..FF.F [ 90%]
..FF.FF..FF.F........FF..FF.F                                            [ 91%]
tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
....                                                                     [ 92%]
tardis/visualization/tools/tests/test_sdec_plot.py ...FFFFFFFFFFFFFFFFFF [ 94%]
FFFFFFFFFFFFFF................                                           [ 95%]
tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
....                                                                     [ 96%]
tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
..................                                                       [ 98%]
tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
......                                                                   [100%]

=================================== FAILURES ===================================
_____________________ test_calculate_sobolev_line_opacity ______________________

left = array([13, 13, 13, ..., 19, 19, 19], dtype=int8)
right = array([13, 13, 13, ..., 19, 19, 19], dtype=int8), err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (0.08897 %)
E           [left]:  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
E           [right]: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f035b37a0>
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f037f0680>

    def test_calculate_sobolev_line_opacity(
        nb_simulation_verysimple, regression_data
    ):
        legacy_plasma = nb_simulation_verysimple.plasma
    
        actual = calculate_sobolev_line_opacity(
            legacy_plasma.lines,
            legacy_plasma.level_number_density,
            legacy_plasma.time_explosion,
            legacy_plasma.stimulated_emission_factor,
        )
        expected = regression_data.sync_dataframe(actual)
>       pdt.assert_frame_equal(actual, expected)

tardis/opacities/tests/test_tau_sobolev.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [0] are different
E   
E   MultiIndex level [0] values are different (0.08897 %)
E   [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
E          ...
E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
E         dtype='int64', name='atomic_number', length=29224)
E   [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
E          ...
E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
E         dtype='int64', name='atomic_number', length=29224)
E   At positional index 480, first diff: 8 != 20

testing.pyx:173: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
---------------------------- Captured stderr setup -----------------------------

Packets:                                                                                   4020/? [00:18<00:00, 34080.61it/s][A
Packets:                                                                                   4021/? [00:20<00:00, 149.31it/s]  [AIterations:████████████████████████████████████████████████████████████████                4/5 [00:20<00:05,  5.68s/it]
Packets:                                                                                   4030/? [00:20<00:00, 149.31it/s][A
------------------------------ Captured log setup ------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
_________________________ test_calculate_beta_sobolevs _________________________

nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f035b37a0>
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f03902c30>

    def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
        legacy_plasma = nb_simulation_verysimple.plasma
    
        tau_sobolevs = calculate_sobolev_line_opacity(
            legacy_plasma.lines,
            legacy_plasma.level_number_density,
            legacy_plasma.time_explosion,
            legacy_plasma.stimulated_emission_factor,
        )
        actual = calculate_beta_sobolev(tau_sobolevs)
        expected = regression_data.sync_ndarray(actual)
>       npt.assert_allclose(actual, expected)

tardis/opacities/tests/test_tau_sobolev.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee30f40e0>, array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., .....,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13593 / 584480 (2.33%)
E           Max absolute difference among violations: 0.99984222
E           Max relative difference among violations: 6337.12154973
E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...
E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_________ TestPlasma.test_plasma_properties[ionization:nebular-lines] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77da0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[ionization:nebular-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d779b0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[ionization:nebular-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77c20>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
___________ TestPlasma.test_plasma_properties[ionization:nebular-nu] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77860>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[ionization:nebular-wavelength_cm] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77a40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[ionization:nebular-f_lu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d76d50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[ionization:nebular-tau_sobolevs] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77a10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[ionization:nebular-beta_sobolev] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77e90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:nebular-j_blues] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d77d10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f035cf9e0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___________ TestPlasma.test_plasma_properties[ionization:lte-lines] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d74ef0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[ionization:lte-lines_lower_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d74aa0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
__ TestPlasma.test_plasma_properties[ionization:lte-lines_upper_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d744a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____________ TestPlasma.test_plasma_properties[ionization:lte-nu] _____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5bdd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[ionization:lte-wavelength_cm] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5b3e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____________ TestPlasma.test_plasma_properties[ionization:lte-f_lu] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5ba10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:lte-tau_sobolevs] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5b410>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:lte-beta_sobolev] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5bbf0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[ionization:lte-j_blues] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5b500>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdbca2a0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___________ TestPlasma.test_plasma_properties[excitation:lte-lines] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f58bf0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[excitation:lte-lines_lower_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59640>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
__ TestPlasma.test_plasma_properties[excitation:lte-lines_upper_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f588f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____________ TestPlasma.test_plasma_properties[excitation:lte-nu] _____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59fd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[excitation:lte-wavelength_cm] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59ac0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____________ TestPlasma.test_plasma_properties[excitation:lte-f_lu] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59bb0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:lte-tau_sobolevs] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59eb0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:lte-beta_sobolev] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f598b0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[excitation:lte-j_blues] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f597c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fdd0410>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f5b0e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f58680>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f592e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_________ TestPlasma.test_plasma_properties[excitation:dilute-lte-nu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59f40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-wavelength_cm] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f58e60>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:dilute-lte-f_lu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f59190>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-tau_sobolevs] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3fe60>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-beta_sobolev] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3c440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[excitation:dilute-lte-j_blues] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3f860>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efdba9430>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3f680>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3f2f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3ec30>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3cb60>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3c710>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3cc50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3e360>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3e6c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3e4e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0efcc39c70>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3c2f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3fb90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3f1a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3e9f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3eb70>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3eae0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f3ce00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f19dc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1ac90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f03939bb0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1ad20>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1bd70>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1b2f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-nu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1b170>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1acc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-f_lu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29f1b950>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e08f80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e09040>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e091c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06ba4e00>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e09f40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0a000>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0a0c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0a300>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0a3c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0a480>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0ac00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0acc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0ae40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee36be690>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0bbc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0bc80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0bd40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29e0bf80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd4080>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd4140>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd48c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:scatter-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd4b00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06901520>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5880>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5940>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5a00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-nu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5c40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5d00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-f_lu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd5dc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd6540>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd6600>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd6780>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f06e6f0b0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd7500>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd75c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd7680>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd78c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd7980>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29cd7a40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d00200>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d002c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d00440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0ffc57c0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d011c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01280>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01340>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[disable_electron_scattering:True-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01580>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01640>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[disable_electron_scattering:True-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01700>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01e80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d01f40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d020c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee8babe90>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d02e40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d02f00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d02fc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
___ TestPlasma.test_plasma_properties[disable_electron_scattering:False-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d03200>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d032c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:False-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d03380>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d03b00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d03bc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d03d40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e39955af0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d28b00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d28bc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d28c80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d28ec0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d28f80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d29040>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d29640>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
E   At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d29700>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d297c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d29880>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d29a00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee6c2cf80>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2a780>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2a840>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2a900>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2ab40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2ac00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2acc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2b2c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (2.42915 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2b380>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2b440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2b500>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d2b680>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fb21160>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d54440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d54500>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d545c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d54800>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d548c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d54980>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d54f80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (2.42915 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d55040>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d55100>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d551c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d55340>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0f0fe9a8d0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d560c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56180>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56240>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-nu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56480>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56540>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-f_lu] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56600>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56d80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56e40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-j_blues] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d56fc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0edff84410>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d57d40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d57e00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29d57ec0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-nu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b80140>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b80200>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-f_lu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b802c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b80a40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b80b00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-j_blues] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b80c80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee9a94a40>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81a00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81ac0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81b80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
______ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81dc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81e80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b81f40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b826c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b82780>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-j_blues] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b82900>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0ee7af4e00>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83680>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83740>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83800>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83a40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83b00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29b83bc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29ba4380>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29ba4440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f0f29ba45c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f0e3991aa50>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_________________ test_hdf_plasma[stimulated_emission_factor] __________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'stimulated_emission_factor'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0ee550e0c0>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f06977b00>, array([[0.        , 0.        , 0.        , ..., 0.   ...1,
        0.01476858],
       [0.01433244, 0.01435378, 0.01437513, ..., 0.0146952 , 0.01471653,
        0.01473787]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 80 / 584480 (0.0137%)
E           Max absolute difference among violations: 1.
E           Max relative difference among violations: 1.
E            ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
E            DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___________________ test_hdf_plasma[lines_lower_level_index] ___________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'lines_lower_level_index'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f06c71880>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee305d120>, array([2577, 2577, 2577, ..., 3886, 3846, 3885]), array([2577, 2577, 2577, ..., 3886, 3846, 3885]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 775 / 29224 (2.65%)
E           Max absolute difference among violations: 4005
E           Max relative difference among violations: 415.5
E            ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
E            DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___________________ test_hdf_plasma[lines_upper_level_index] ___________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'lines_upper_level_index'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0efdbbc650>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee9785d00>, array([2613, 2612, 2611, ..., 3899, 3852, 3898]), array([2613, 2612, 2611, ..., 3899, 3852, 3898]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 1843 / 29224 (6.31%)
E           Max absolute difference among violations: 4046
E           Max relative difference among violations: 54.65079365
E            ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
E            DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________________________ test_hdf_plasma[beta_sobolev] _________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'beta_sobolev'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0efdbbc890>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f06ca34c0>, array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., .....,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13593 / 584480 (2.33%)
E           Max absolute difference among violations: 0.99984222
E           Max relative difference among violations: 6337.12154973
E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...
E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____________________________ test_hdf_plasma[lines] ____________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'lines'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f06c70b60>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f200b2980>, array([[6.78130000e+04, 6.67720000e+01, 2.70301683e-02...       [1.04462000e+05, 9.99900019e+05, 2.64868307e-04, ...,
        4.44653904e+09, 1.76709163e+00, 9.99900019e-03]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13481 / 263016 (5.13%)
E           Max absolute difference among violations: 2.93004431e+13
E           Max relative difference among violations: 6160.70416047
E            ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
E                   4.043917e+10, 6.677200e-07],
E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
E            DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
E                   4.043917e+10, 6.677200e-07],
E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____________________________ test_hdf_plasma[f_lu] _____________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'f_lu'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f06c73b90>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f200b1080>, array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02,...), array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, ...,
       9.93184643e-04, 1.12688279e+00, 4.41447178e-04]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 2241 / 29224 (7.67%)
E           Max absolute difference among violations: 2.92713618
E           Max relative difference among violations: 6160.70416047
E            ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
E                  1.126883e+00, 4.414472e-04])
E            DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
E                  1.126883e+00, 4.414472e-04])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________________________ test_hdf_plasma[tau_sobolevs] _________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f0f0fc4d640>
attr = 'tau_sobolevs'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f06c954f0>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f066d2480>, array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00...       [7.57366002e-14, 3.42661945e-14, 1.59795775e-14, ...,
        2.25618458e-18, 1.41426559e-18, 8.96636158e-19]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 40040 / 584480 (6.85%)
E           Max absolute difference among violations: 604603.16180317
E           Max relative difference among violations: 4.12352828e+47
E            ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
E                   0.000000e+00, 0.000000e+00],
E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
E            DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
E                   0.000000e+00, 0.000000e+00],
E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__________________ test_plasma_state_iterations[iterations_w] __________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'iterations_w'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0ee931a000>

    @pytest.mark.parametrize(
        "attr",
        [
            "iterations_w",
            "iterations_t_rad",
            "iterations_electron_densities",
            "iterations_t_inner",
        ],
    )
    def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
        actual = getattr(simulation_one_loop, attr)
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.DataFrame(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
E   [index]: [0, 1]
E   [left]:  [0.40039163797855976, 0.4502464194566679]
E   [right]: [0.40039163797855976, 0.4500690173218345]
E   At positional index 1, first diff: 0.4502464194566679 != 0.4500690173218345

testing.pyx:173: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
---------------------------- Captured stderr setup -----------------------------

Packets:                                                                                   4031/? [04:57<00:00,  7.23it/s] [A
Packets:                                                                                   15956/? [04:57<00:00, 65.63it/s][A
Packets:                                                                                   28116/? [04:57<00:00, 150.59it/s][A
Packets:                                                                                   40317/? [04:57<00:00, 272.17it/s][AIterations:████████████████████████████████████████████████████████████████████████████████5/5 [04:58<00:00, 103.85s/it]
Packets:                                                                                   44030/? [04:58<00:00, 272.17it/s][A
Packets:                                                                                   0/40000 [00:00<?, ?it/s]         [A
Packets:   █████████████████████▉                                                          10945/40000 [00:00<00:00, 35627.13it/s][A
Packets:   █████████████████████████████                                                   14508/40000 [00:00<00:00, 35542.46it/s][A
Packets:   ████████████████████████████████████▏                                           18087/40000 [00:00<00:00, 35618.49it/s][A
Packets:   ███████████████████████████████████████████▎                                    21649/40000 [00:00<00:00, 35262.76it/s][A
Packets:   ██████████████████████████████████████████████████▌                             25259/40000 [00:00<00:00, 35515.39it/s][A
Packets:   █████████████████████████████████████████████████████████▌                      28810/40000 [00:00<00:00, 35480.16it/s][A
Packets:   ████████████████████████████████████████████████████████████████▊               32378/40000 [00:00<00:00, 35537.96it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████▊        35932/40000 [00:01<00:00, 35372.27it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████████████▉ 39469/40000 [00:01<00:00, 35291.71it/s][AIterations:                                                                                6/? [04:59<00:00, 69.18s/it] 
Packets:   ████████████████████████████████████████████████████████████████████████████████40000/40000 [00:01<00:00, 35291.71it/s][A
------------------------------ Captured log setup ------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
________________ test_plasma_state_iterations[iterations_t_rad] ________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'iterations_t_rad'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f0383fce0>

    @pytest.mark.parametrize(
        "attr",
        [
            "iterations_w",
            "iterations_t_rad",
            "iterations_electron_densities",
            "iterations_t_inner",
        ],
    )
    def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
        actual = getattr(simulation_one_loop, attr)
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.DataFrame(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
E   [index]: [0, 1]
E   [left]:  [9967.488442185557, 10090.337237980311]
E   [right]: [9967.488442185557, 10091.396322818851]
E   At positional index 1, first diff: 10090.337237980311 != 10091.396322818851

testing.pyx:173: AssertionError
_________ test_plasma_state_iterations[iterations_electron_densities] __________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'iterations_electron_densities'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0ee5a1c2f0>

    @pytest.mark.parametrize(
        "attr",
        [
            "iterations_w",
            "iterations_t_rad",
            "iterations_electron_densities",
            "iterations_t_inner",
        ],
    )
    def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
        actual = getattr(simulation_one_loop, attr)
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.DataFrame(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
E   [index]: [0, 1]
E   [left]:  [2869544645.3209715, 2880937482.0686474]
E   [right]: [2869544645.3209715, 2881024886.0882792]
E   At positional index 1, first diff: 2880937482.0686474 != 2881024886.0882792

testing.pyx:173: AssertionError
_______________ test_plasma_state_iterations[iterations_t_inner] _______________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'iterations_t_inner'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f0ff140b0>

    @pytest.mark.parametrize(
        "attr",
        [
            "iterations_w",
            "iterations_t_rad",
            "iterations_electron_densities",
            "iterations_t_inner",
        ],
    )
    def test_plasma_state_iterations(simulation_one_loop, attr, regression_data):
        actual = getattr(simulation_one_loop, attr)
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.DataFrame(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_frame_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:46: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (50.0 %)
E   [index]: [0, 1]
E   [left]:  [9974.969233778693, 10755.649243810945]
E   [right]: [9974.969233778693, 10755.075718840653]
E   At positional index 1, first diff: 10755.649243810945 != 10755.075718840653

testing.pyx:173: AssertionError
___________________ test_plasma_estimates[nu_bar_estimator] ____________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'nu_bar_estimator'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0e395f62d0>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (100.0 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
E   [left]:  [1.0165718020021351e+29, 8.62571306411696e+28, 7.646316854968748e+28, 6.908031002110369e+28, 6.371004709369714e+28, 5.982449936420004e+28, 5.597909928934078e+28, 5.282501777671676e+28, 5.020820935289605e+28, 4.812488067251654e+28, 4.619378304591877e+28, 4.388306749667424e+28, 4.251249216289637e+28, 4.088546520299996e+28, 3.9858007734081235e+28, 3.901095133154697e+28, 3.757289741517146e+28, 3.667469944294313e+28, 3.5385186052547926e+28, 3.4426113508496258e+28]
E   [right]: [1.0202042777991753e+29, 8.604643039338655e+28, 7.621843612415326e+28, 6.887796775939633e+28, 6.338143063845967e+28, 5.961770832970249e+28, 5.583215038688499e+28, 5.26214201104387e+28, 5.00719468999816e+28, 4.795144203550334e+28, 4.630537292368217e+28, 4.425690259081018e+28, 4.270865369572798e+28, 4.094544283657345e+28, 3.972280940559004e+28, 3.884152385274923e+28, 3.7498225331847723e+28, 3.6666118688506634e+28, 3.5319738797726287e+28, 3.437270715325205e+28]
E   At positional index 0, first diff: 1.0165718020021351e+29 != 1.0202042777991753e+29

testing.pyx:173: AssertionError
______________________ test_plasma_estimates[j_estimator] ______________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'j_estimator'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0e395f7440>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (100.0 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
E   [left]:  [116384046125782.77, 98364976859735.92, 87012429590533.9, 78323368794569.64, 72459831721910.19, 67801678518213.21, 63548285829448.92, 60168818659967.44, 57633822561706.6, 55385117780772.836, 53329513121226.89, 51175446710558.34, 49779694218811.86, 48156497541116.836, 46966488943371.055, 46111178859655.91, 44994947495504.64, 44112804763262.04, 42985240421186.83, 42124609741493.33]
E   [right]: [116635492761989.08, 98171051632121.94, 86872515261186.84, 78289696965690.05, 72209193315676.42, 67743848273202.76, 63510940656108.0, 60117004438842.5, 57572723670164.91, 55316097836075.18, 53398108009568.71, 51391839595543.54, 49914799926154.195, 48252386019894.61, 46984233483222.1, 46076787175987.44, 45005288890715.74, 44179675761283.02, 43040066710169.69, 42141149121109.82]
E   At positional index 0, first diff: 116384046125782.77 != 116635492761989.08

testing.pyx:173: AssertionError
______________________ test_plasma_estimates[t_radiative] ______________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 't_radiative'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0ecc62e210>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (100.0 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
E   [left]:  [10090.337237980311, 10116.111865250032, 10139.105647760403, 10142.095945716788, 10150.321115800372, 10123.716397444778, 10084.67289639175, 10057.355380804116, 10074.14802083069, 10033.34032553025, 10031.455217823204, 9984.072259359717, 9944.672801953748, 9914.94014983714, 9894.541486572769, 9855.440248879018, 9803.441918457313, 9774.67801925122, 9733.316249005853, 9699.146904851166]
E   [right]: [10091.396322818851, 10113.672762424394, 10138.57214647089, 10142.40782954104, 10149.471061360664, 10124.731447668686, 10084.96501000204, 10057.88480134284, 10073.983914823793, 10031.924501830883, 10029.890159447663, 9982.658841271636, 9943.375727608092, 9914.259749796103, 9893.924180562475, 9854.860600288932, 9802.891513260798, 9774.848565783677, 9735.162327402864, 9698.911095826039]
E   At positional index 0, first diff: 10090.337237980311 != 10091.396322818851

testing.pyx:173: AssertionError
____________________ test_plasma_estimates[dilution_factor] ____________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'dilution_factor'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0efccaaa80>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (95.0 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]
E   [left]:  [0.4502464194566679, 0.3588077756029479, 0.29919338772622006, 0.2578213585150996, 0.22534909809623732, 0.20112973676351859, 0.18256797939880523, 0.16658198033870197, 0.15046332030127915, 0.13967997753779499, 0.12854517069780738, 0.12086181277279592, 0.11337029016111175, 0.10647071947828184, 0.1001313812482062, 0.09481639007111045, 0.09049931385807097, 0.08585386760525203, 0.0820617088891274, 0.07822247975675253]
E   [right]: [0.4500690173218345, 0.3591778672440072, 0.299315794490968, 0.2578615845098735, 0.2254422032786788, 0.20109997630618956, 0.18257381854718482, 0.166581017494628, 0.15049754388199085, 0.13975435818105286, 0.12862206084807348, 0.12092168181342122, 0.1134233405695467, 0.10650389106044364, 0.10016109465785483, 0.09484390983006763, 0.09052533757303871, 0.08585912682814001, 0.0820302832176511, 0.07824287530618068]
E   At positional index 0, first diff: 0.4502464194566679 != 0.4500690173218345

testing.pyx:173: AssertionError
______________________ test_plasma_estimates[output_nus] _______________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'output_nus'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0edc5f4380>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (93.3075 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1806608624563428.5, 620862018889975.1, 651590360402046.8, 320943910538451.8, 561113750948472.0, 241813077915582.47, 676646472921252.1, 599025280528010.1, 607367947391787.6, 916971958881208.9, 944448818218154.5, 768258845302434.6, 3180924275421589.0, 2598931415289245.5, 857783354573278.5, 618961030157953.0, 551416577022691.9, 1086607883412041.1, 754829008385123.1, 491347895562954.75, 463465281553386.5, 1490385284357192.2, 820083420869824.9, 2175968348120412.0, 735390733822588.2, 940468156618057.8, 1199763529453654.8, 555520468115058.6, 1389937333648209.8, 1385931190300953.0, 368701656937785.25, 1912212664036841.8, 2017892944406485.5, 627650897605616.9, 1067487506686223.0, 948596178833240.9, 1978333560699086.0, 445386051467747.25, 1003125289074394.4, 849780111628392.1, 967717195563717.8, 1280742096219531.0, 1149849611786118.0, 1001922301464027.5, 1119252744389741.1, 508295069236469.7, 1892743849941115.5, 781585077537089.6, 1151156724320413.0, 604536150467357.8, 725946428462161.8, 457842696902374.94, 527259212440423.7, 341747840187921.4, 562226698625033.3, 1275220787923621.2, 656850299934257.8, 723897432192893.0, 1885653269401127.0, 586019958421091.4, 917082513099873.6, 691116115044799.8, 267992695666447.72, 343768201764091.25, 96588669652565.16, 1296826336599265.8, 491364756409299.2, 1492265818518465.2, 764049736945861.0, 1572646992102907.0, 1559779044312961.0, 476772251672717.25, 1860171378185045.5, 703037409456574.1, 1017503831063037.0, 484515686928066.25, 453175828268090.9, 717643868910604.1, 508969981599046.8, 1838872715503452.5, 663689519603300.6, 1322153982095330.5, 601639944763527.4, 1840486828647121.0, 440748324828153.3, 1641787766258543.2, 1588140566162619.2, 1174189775044361.5, 1215719222985419.8, 997715245989672.0, 1168655861235907.5, 1048633827874171.4, 1513925240826093.2, 1363224237769579.2, 430259960128613.0, 386080860775949.9, 1139214315131762.2, 307492179499752.94, 403495784873553.1, 1156290495733696.0, ...]
E   [right]: [1806512041912368.8, 620828912578783.0, 651561681514283.2, 320926793622792.2, 561113831783033.0, 241800185490365.7, 676657497080704.5, 599041295479916.1, 607335547665201.9, 916923063058785.2, 944437910067241.0, 768263081009078.1, 3180974191574679.5, 2598971968757746.0, 857737633068955.4, 618928023168687.5, 551416803496124.25, 1086549942730966.9, 754833333392143.2, 491321027587878.7, 463440568130160.4, 1490299638092356.5, 820039899773855.1, 2452391211684156.5, 735351500669317.2, 754784724695130.1, 1199750254428993.5, 555501175228475.94, 1389863217827777.5, 1385857288100655.8, 368681996608404.06, 1912110698856825.8, 2017785344022282.2, 627651183748411.8, 1067430591325981.9, 948623864004036.0, 1978326785288413.0, 445362302085804.25, 1003071799286044.6, 849734798686120.6, 967665593846029.1, 1280673803031827.2, 1146262107204918.5, 1001868875822752.4, 1119192629281446.4, 508267969421775.25, 1892642922899362.8, 781543400968040.9, 1151095341031394.2, 604503914702702.6, 725907718720482.8, 457818283293006.9, 527261796217634.44, 341748696489478.8, 562196737455386.1, 1275152810939863.2, 657003154645147.8, 723858331274613.6, 1885552835316985.5, 585988709997902.4, 917033611382352.2, 696895494383372.0, 267978405454919.2, 343749870964784.4, 96583519241591.61, 1296758039945233.8, 491338550899887.9, 1492219434855197.0, 764008995416200.5, 1572724795429636.2, 1559695871999531.0, 476770259286661.5, 1860071011741526.8, 702999878183188.2, 1017511963264823.4, 484489851031166.6, 453151663510803.5, 717543258409877.6, 508990329432545.4, 1838756496639701.8, 663654129595372.2, 1322083461079532.0, 601616268613591.0, 1840388688113732.8, 440724823612140.5, 1641895920313314.8, 1588055811374384.5, 1174127163560797.5, 1215687723496508.2, 997743048820577.1, 1168560411536350.2, 1048577905256173.4, 1513844599143900.5, 1363151613665534.0, 430237017317327.8, 386060300653508.2, 1139153568649478.2, 307475792296687.0, 403474269212082.0, 1156228838695875.2, ...]
E   At positional index 0, first diff: 1806608624563428.5 != 1806512041912368.8

testing.pyx:173: AssertionError
____________________ test_plasma_estimates[output_energies] ____________________

simulation_one_loop = <tardis.simulation.base.Simulation object at 0x7f0ee7b7fda0>
attr = 'output_energies'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0e395f6bd0>

    @pytest.mark.parametrize(
        "attr",
        [
            "nu_bar_estimator",
            "j_estimator",
            "t_radiative",
            "dilution_factor",
            "output_nus",
            "output_energies",
        ],
    )
    def test_plasma_estimates(simulation_one_loop, attr, regression_data):
        if attr in ["nu_bar_estimator", "j_estimator"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.radfield_mc_estimators,
                attr,
            )
        elif attr in ["t_radiative", "dilution_factor"]:
            actual = getattr(simulation_one_loop.simulation_state, attr)
        elif attr in ["output_nus", "output_energies"]:
            actual = getattr(
                simulation_one_loop.transport.transport_state.packet_collection,
                attr,
            )
        else:
            actual = getattr(simulation_one_loop.transport, attr)
    
        if hasattr(actual, "value"):
            actual = actual.value
        actual = pd.Series(actual)
        expected = regression_data.sync_dataframe(actual)
>       pd.testing.assert_series_equal(actual, expected, rtol=1e-5, atol=1e-8)

tardis/simulation/tests/test_simulation.py:80: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: Series are different
E   
E   Series values are different (5.69 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [2.580187415842485e-05, 2.5615305276449435e-05, 2.5858067889302645e-05, -2.428653976442584e-05, 2.4922994639403415e-05, -2.4562308146153393e-05, 2.410111883450277e-05, -2.4384311982125988e-05, -2.4539055130067117e-05, 2.5417984817525785e-05, 2.5118801887778956e-05, -2.4640919894610292e-05, -2.423143307883106e-05, -2.450580654750154e-05, 2.4958490931664476e-05, -2.4193730283432793e-05, 2.5669900182281568e-05, 2.5717784331930673e-05, 2.464778586595558e-05, -2.422776867520316e-05, 2.5447471360622184e-05, -2.4096375187582826e-05, 2.5614840427079128e-05, -2.49312723626409e-05, 2.5377783864650233e-05, -2.3976658244257284e-05, 2.436795912367303e-05, 2.5580236554001677e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4677663481005804e-05, 2.5692099297777826e-05, 2.270718268700719e-05, -2.4226303508833993e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2282478547016986e-05, 2.588758262836899e-05, -2.4715615971154623e-05, 2.5511122281086607e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3125991893671873e-05, -2.4679838721033196e-05, -2.4704318261060463e-05, -2.3740908948484777e-05, 2.4824314480224635e-05, -2.4131571097024343e-05, -2.4208443492969145e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.3936130899719313e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.4718856984580565e-05, 2.5235644746773655e-05, 2.5659462251071164e-05, 2.5705887025490933e-05, -2.353428102916105e-05, 2.5942471740302383e-05, 2.4777858792597298e-05, -2.4437183065568218e-05, -2.4885876501215466e-05, -2.4616314745328663e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.372394178881923e-05, -2.391362479385318e-05, -2.4073454979842357e-05, 2.5426114770306902e-05, 2.5043045302218097e-05, -2.3655628658685913e-05, 2.564649452803889e-05, -2.38991354195179e-05, 2.53349051266086e-05, 2.4848583494646775e-05, 2.5806793260333468e-05, 2.537958185060352e-05, -2.4205317283566705e-05, 2.452870549491093e-05, 2.491662545911019e-05, -2.4248092466552934e-05, -2.4259084237097454e-05, 2.5042343244083765e-05, -2.4183999173762468e-05, 2.534949108326902e-05, -2.43891861941742e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
E   [right]: [2.580187060760512e-05, 2.5615305276449435e-05, 2.585830862681326e-05, -2.4286539523836896e-05, 2.4924327273178824e-05, -2.4562308329704016e-05, 2.4102796735064873e-05, -2.4386264249292878e-05, -2.4539054606359595e-05, 2.5417984817525785e-05, 2.5119851241109903e-05, -2.464236975797002e-05, -2.423310551200988e-05, -2.4507495750261827e-05, 2.4958491461131913e-05, -2.4193730203503752e-05, 2.5671279598406848e-05, 2.571778434758039e-05, 2.464924146734715e-05, -2.4227735746845522e-05, 2.5447471360622184e-05, -2.409627535779648e-05, 2.5614846934356755e-05, -2.4320296346496788e-05, 2.5377783180930537e-05, -2.345680162082186e-05, 2.436898893045542e-05, 2.5580712211859562e-05, 2.500916000868505e-05, 2.5607655801196168e-05, 2.579299539089642e-05, 2.5878529010134043e-05, 2.5847853785554793e-05, 2.4678990692654424e-05, 2.5692099452386407e-05, 2.270905632364821e-05, -2.4227512425411162e-05, 2.58085782843688e-05, 2.581290010721019e-05, 2.5342132806068496e-05, 2.543451735883577e-05, 2.5608096392788184e-05, 2.2214142249592017e-05, 2.588758262836899e-05, -2.4715606408157026e-05, 2.5511122485544443e-05, 2.5795485644498618e-05, 2.592050972545506e-05, 2.5164494022525347e-05, 2.584317762440439e-05, 2.5503993551590287e-05, 2.5856838411420908e-05, -2.3127338442376704e-05, -2.4681216640073288e-05, -2.4704319074974646e-05, -2.3740909354181544e-05, 2.4831415400580145e-05, -2.4131554413805748e-05, -2.420844496771843e-05, 2.5773786671578585e-05, 2.5945101664127274e-05, -2.4137581143845235e-05, 2.5389082054809254e-05, 2.5721255832406715e-05, 2.5248897337823434e-05, 2.471887326730884e-05, 2.5235644520855386e-05, 2.5660032958970583e-05, 2.5705887025490933e-05, -2.3536700387812003e-05, 2.5942471740302383e-05, 2.4779076546395e-05, -2.4437167612038533e-05, -2.4885874975052928e-05, -2.461782418608366e-05, 2.5780939080246854e-05, 2.5596677948915614e-05, -2.3721880722086934e-05, -2.391585609212342e-05, -2.407321716937353e-05, 2.5426114770306902e-05, 2.5043044930642476e-05, -2.3655959156054043e-05, 2.564649452803889e-05, -2.389913546657555e-05, 2.533792518100767e-05, 2.4848582397006154e-05, 2.5806793260333468e-05, 2.5380277617431415e-05, -2.4207282609290893e-05, 2.4528010028979532e-05, 2.491662531246e-05, -2.4248093837055892e-05, -2.4259085434617066e-05, 2.5042343244083765e-05, -2.4184000860153038e-05, 2.534949108326902e-05, -2.4389186927485497e-05, 2.5538918657626514e-05, 2.5607197079302785e-05, ...]
E   At positional index 23, first diff: -2.49312723626409e-05 != -2.4320296346496788e-05

testing.pyx:173: AssertionError
________________ TestSpectrumSolver.test_spectrum_real_packets _________________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f0f20eab380>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e38d7d190>

    def test_spectrum_real_packets(self, simulation):
        transport_state = simulation.transport.transport_state
        spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
    
        solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
        result = solver.spectrum_real_packets.luminosity
        key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
        expected = self.get_expected_data(key)
    
        luminosity = u.Quantity(expected, "erg /s")
    
>       assert_quantity_allclose(
            result,
            luminosity,
        )

tardis/spectrum/tests/test_spectrum_solver.py:71: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e44bc05e0>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 522 / 10000 (5.22%)
E           Max absolute difference among violations: 8.24408733e+37
E           Max relative difference among violations: 1.
E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___________ TestSpectrumSolver.test_spectrum_real_packets_reabsorbed ___________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f0f20eab5c0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e38d7d190>

    def test_spectrum_real_packets_reabsorbed(self, simulation):
        transport_state = simulation.transport.transport_state
        spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
    
        solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
        result = solver.spectrum_real_packets_reabsorbed.luminosity
        key = "simulation/spectrum_solver/spectrum_real_packets_reabsorbed/luminosity"
        expected = self.get_expected_data(key)
    
        luminosity = u.Quantity(expected, "erg /s")
    
>       assert_quantity_allclose(
            result,
            luminosity,
        )

tardis/spectrum/tests/test_spectrum_solver.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e44bd02c0>, array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38,...), array([2.03920412e+38, 3.72882494e+38, 2.29646943e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 415 / 10000 (4.15%)
E           Max absolute difference among violations: 6.26425326e+37
E           Max relative difference among violations: 1.00484475
E            ACTUAL: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([2.039204e+38, 3.728825e+38, 2.296469e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________________________ TestSpectrumSolver.test_solve _________________________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f0f20eab800>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e38d7d190>

    def test_solve(self, simulation):
        transport_state = simulation.transport.transport_state
        spectrum_frequency_grid = simulation.transport.spectrum_frequency_grid
    
        solver = SpectrumSolver(transport_state, spectrum_frequency_grid, None)
        result_real, result_virtual, result_integrated = solver.solve(
            transport_state
        )
        key_real = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
        expected_real = self.get_expected_data(key_real)
    
        luminosity_real = u.Quantity(expected_real, "erg /s")
    
>       assert_quantity_allclose(
            result_real.luminosity,
            luminosity_real,
        )

tardis/spectrum/tests/test_spectrum_solver.py:105: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e44bc3b00>, array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38,...), array([1.33511090e+39, 1.33738696e+39, 9.41598476e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 522 / 10000 (5.22%)
E           Max absolute difference among violations: 8.24408733e+37
E           Max relative difference among violations: 1.
E            ACTUAL: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.335111e+39, 1.337387e+39, 9.415985e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__________________ TestTransportSimple.test_j_blue_estimators __________________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f0f20ecc5f0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed475ed80>

    def test_j_blue_estimators(self, simulation):
        key = "simulation/transport/transport_state/j_blue_estimator"
        expected = self.get_expected_data(key)
    
>       npt.assert_allclose(
            simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator,
            expected.values,
        )

tardis/tests/test_tardis_full.py:70: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e63ea0b80>, array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., .....,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 490652 / 584480 (83.9%)
E           Max absolute difference among violations: 5.32418652e-19
E           Max relative difference among violations: 8.19556014
E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...
E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
[[1mtardis.io.atom_data.util[0m][[1;37mINFO[0m   ]  
	
	Atom Data kurucz_cd23_chianti_H_He.h5 not found in local path.
	Exists in TARDIS Data repo /home/aryaatharva18/Downloads/tardis-data/kurucz_cd23_chianti_H_He.h5 ([1mutil.py[0m:34)
[[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
	Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace  ([1mbase.py[0m:258)
[[1mtardis.io.atom_data.base[0m][[1;37mINFO[0m   ]  
	Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules ([1mbase.py[0m:262)
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 5 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.104e+42 erg / s
	Luminosity absorbed  = 2.674e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Plasma stratification: ([1mbase.py[0m:649)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Shell No.    t_rad    next_t_rad    w   next_w
	0         9.97e+03 K  1.01e+04 K   0.4   0.449
	5         9.89e+03 K  1.01e+04 K 0.211   0.201
	10        9.82e+03 K     1e+04 K 0.143   0.129
	15        9.75e+03 K  9.85e+03 K 0.105  0.0953
 ([1mbase.py[0m:650)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Current t_inner = 9974.969 K
	Expected t_inner for next iteration = 10736.784 K
 ([1mbase.py[0m:652)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 2 of 5 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 1.084e+43 erg / s
	Luminosity absorbed  = 3.625e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Plasma stratification: ([1mbase.py[0m:649)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.01e+04 K  1.05e+04 K  0.449    0.48
	5         1.01e+04 K  1.06e+04 K  0.201   0.202
	10           1e+04 K  1.04e+04 K  0.129   0.126
	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935
 ([1mbase.py[0m:650)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Current t_inner = 10736.784 K
	Expected t_inner for next iteration = 10718.886 K
 ([1mbase.py[0m:652)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 3 of 5 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 1.086e+43 erg / s
	Luminosity absorbed  = 3.508e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	Iteration converged 1/4 consecutive times. ([1mbase.py[0m:260)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Plasma stratification: ([1mbase.py[0m:649)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.05e+04 K  1.07e+04 K   0.48    0.49
	5         1.06e+04 K  1.09e+04 K  0.202   0.198
	10        1.04e+04 K  1.07e+04 K  0.126   0.124
	15        1.02e+04 K  1.04e+04 K 0.0935  0.0923
 ([1mbase.py[0m:650)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Current t_inner = 10718.886 K
	Expected t_inner for next iteration = 10695.170 K
 ([1mbase.py[0m:652)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 4 of 5 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 1.082e+43 erg / s
	Luminosity absorbed  = 3.430e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	Iteration converged 2/4 consecutive times. ([1mbase.py[0m:260)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Plasma stratification: ([1mbase.py[0m:649)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.07e+04 K  1.09e+04 K   0.49   0.488
	5         1.09e+04 K   1.1e+04 K  0.198   0.193
	10        1.07e+04 K  1.08e+04 K  0.124   0.122
	15        1.04e+04 K  1.05e+04 K 0.0923  0.0906
 ([1mbase.py[0m:650)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Current t_inner = 10695.170 K
	Expected t_inner for next iteration = 10682.561 K
 ([1mbase.py[0m:652)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 4 iterations 
	Simulation took 10.99 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 5 of 5 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 1.074e+43 erg / s
	Luminosity absorbed  = 3.442e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
---------------------------- Captured stderr setup -----------------------------

Packets:                                                                                   0/200000 [00:00<?, ?it/s]                [A
Packets:                                                                                   0/200000 [00:00<?, ?it/s][A
Packets:   ████▊                                                                           11895/200000 [00:00<00:01, 118949.26it/s][A
Packets:   █████████▌                                                                      24034/200000 [00:00<00:01, 120382.18it/s][A
Packets:   ██████████████▍                                                                 36073/200000 [00:00<00:01, 120183.92it/s][A
Packets:   ███████████████████▏                                                            48109/200000 [00:00<00:01, 120251.94it/s][A
Packets:   ████████████████████████▏                                                       60403/200000 [00:00<00:01, 121217.34it/s][A
Packets:   █████████████████████████████                                                   72576/200000 [00:00<00:01, 121388.75it/s][A
Packets:   █████████████████████████████████▉                                              84726/200000 [00:00<00:00, 121423.16it/s][A
Packets:   ██████████████████████████████████████▊                                         96878/200000 [00:00<00:00, 121451.44it/s][A
Packets:   ███████████████████████████████████████████▌                                    109024/200000 [00:00<00:00, 121032.14it/s][A
Packets:   ████████████████████████████████████████████████▍                               121128/200000 [00:01<00:00, 121000.39it/s][A
Packets:   █████████████████████████████████████████████████████▎                          133229/200000 [00:01<00:00, 120654.17it/s][A
Packets:   ██████████████████████████████████████████████████████████                      145295/200000 [00:01<00:00, 120648.91it/s][A
Packets:   ██████████████████████████████████████████████████████████████▉                 157361/200000 [00:01<00:00, 120142.51it/s][A
Packets:   ███████████████████████████████████████████████████████████████████▊            169376/200000 [00:01<00:00, 120118.02it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████▌       181562/200000 [00:01<00:00, 120637.04it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▍  193627/200000 [00:01<00:00, 120115.46it/s][AIterations:                                                                                13/? [08:06<00:00, 16.38s/it]
Packets:   ███████████████████████████████████████████████████████████████████████████████▉199999/200000 [00:01<00:00, 120115.46it/s][A
Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
Packets:   ████▊                                                                           12013/200000 [00:00<00:01, 116567.20it/s][A
Packets:   █████████▋                                                                      24355/200000 [00:00<00:01, 120547.22it/s][A
Packets:   ██████████████▌                                                                 36415/200000 [00:00<00:01, 119178.96it/s][A
Packets:   ███████████████████▎                                                            48436/200000 [00:00<00:01, 119578.84it/s][A
Packets:   ████████████████████████▎                                                       60687/200000 [00:00<00:01, 120625.94it/s][A
Packets:   █████████████████████████████                                                   72753/200000 [00:00<00:01, 120565.92it/s][A
Packets:   █████████████████████████████████▉                                              84812/200000 [00:00<00:00, 120540.47it/s][A
Packets:   ██████████████████████████████████████▊                                         96946/200000 [00:00<00:00, 120793.09it/s][A
Packets:   ███████████████████████████████████████████▌                                    109027/200000 [00:00<00:00, 120575.04it/s][A
Packets:   ████████████████████████████████████████████████▍                               121086/200000 [00:01<00:00, 120135.41it/s][A
Packets:   █████████████████████████████████████████████████████▎                          133136/200000 [00:01<00:00, 120244.71it/s][A
Packets:   ██████████████████████████████████████████████████████████                      145161/200000 [00:01<00:00, 120202.02it/s][A
Packets:   ██████████████████████████████████████████████████████████████▊                 157182/200000 [00:01<00:00, 120139.11it/s][A
Packets:   ███████████████████████████████████████████████████████████████████▋            169197/200000 [00:01<00:00, 120077.10it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████▍       181247/200000 [00:01<00:00, 120203.52it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▎  193311/200000 [00:01<00:00, 120334.25it/s][AIterations:                                                                                14/? [08:09<00:00, 12.26s/it]
Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 120334.25it/s][A
Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
Packets:   ████▊                                                                           12104/200000 [00:00<00:01, 121038.67it/s][A
Packets:   █████████▋                                                                      24319/200000 [00:00<00:01, 121691.27it/s][A
Packets:   ██████████████▌                                                                 36489/200000 [00:00<00:01, 120690.43it/s][A
Packets:   ███████████████████▍                                                            48598/200000 [00:00<00:01, 120844.15it/s][A
Packets:   ████████████████████████▍                                                       60950/200000 [00:00<00:01, 121805.27it/s][A
Packets:   █████████████████████████████▎                                                  73282/200000 [00:00<00:01, 122315.95it/s][A
Packets:   ██████████████████████████████████▏                                             85515/200000 [00:00<00:00, 121612.58it/s][A
Packets:   ███████████████████████████████████████                                         97678/200000 [00:00<00:00, 121530.39it/s][A
Packets:   ███████████████████████████████████████████▉                                    109834/200000 [00:00<00:00, 121536.21it/s][A
Packets:   ████████████████████████████████████████████████▊                               121989/200000 [00:01<00:00, 121220.87it/s][A
Packets:   █████████████████████████████████████████████████████▋                          134112/200000 [00:01<00:00, 120657.93it/s][A
Packets:   ██████████████████████████████████████████████████████████▌                     146258/200000 [00:01<00:00, 120899.58it/s][A
Packets:   ███████████████████████████████████████████████████████████████▎                158349/200000 [00:01<00:00, 120661.47it/s][A
Packets:   ████████████████████████████████████████████████████████████████████▏           170416/200000 [00:01<00:00, 119866.67it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████▉       182482/200000 [00:01<00:00, 120103.43it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▊  194539/200000 [00:01<00:00, 120240.49it/s][AIterations:                                                                                15/? [08:12<00:00,  9.39s/it]
Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 120240.49it/s][A
Packets:                                                                                   0/200000 [00:00<?, ?it/s]                 [A
Packets:   ████▊                                                                           12060/200000 [00:00<00:01, 120596.38it/s][A
Packets:   █████████▋                                                                      24285/200000 [00:00<00:01, 121564.04it/s][A
Packets:   ██████████████▌                                                                 36442/200000 [00:00<00:01, 120714.72it/s][A
Packets:   ███████████████████▍                                                            48515/200000 [00:00<00:01, 120053.77it/s][A
Packets:   ████████████████████████▎                                                       60769/200000 [00:00<00:01, 120942.47it/s][A
Packets:   █████████████████████████████▏                                                  72865/200000 [00:00<00:01, 120208.43it/s][A
Packets:   ██████████████████████████████████                                              85001/200000 [00:00<00:00, 120580.93it/s][A
Packets:   ██████████████████████████████████████▊                                         97166/200000 [00:00<00:00, 120915.13it/s][A
Packets:   ███████████████████████████████████████████▋                                    109286/200000 [00:00<00:00, 121001.05it/s][A
Packets:   ████████████████████████████████████████████████▋                               121593/200000 [00:01<00:00, 121637.46it/s][A
Packets:   █████████████████████████████████████████████████████▌                          133758/200000 [00:01<00:00, 121236.72it/s][A
Packets:   ██████████████████████████████████████████████████████████▎                     145883/200000 [00:01<00:00, 121011.79it/s][A
Packets:   ███████████████████████████████████████████████████████████████▏                157985/200000 [00:01<00:00, 121000.19it/s][A
Packets:   ████████████████████████████████████████████████████████████████████            170086/200000 [00:01<00:00, 120964.87it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████▊       182183/200000 [00:01<00:00, 120545.34it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▋  194238/200000 [00:01<00:00, 119955.61it/s][AIterations:                                                                                16/? [08:14<00:00,  7.39s/it]
Packets:   ████████████████████████████████████████████████████████████████████████████████200000/200000 [00:01<00:00, 119955.61it/s][A
Packets:                                                                                   0/500000 [00:00<?, ?it/s]                 [A
Packets:   █▉                                                                              11997/500000 [00:00<00:13, 36201.29it/s][A
Packets:   ██▍                                                                             15618/500000 [00:00<00:13, 36065.81it/s][A
Packets:   ███                                                                             19212/500000 [00:00<00:13, 36011.33it/s][A
Packets:   ███▋                                                                            22867/500000 [00:00<00:13, 36170.50it/s][A
Packets:   ████▏                                                                           26484/500000 [00:00<00:13, 36125.10it/s][A
Packets:   ████▊                                                                           30096/500000 [00:00<00:13, 35945.16it/s][A
Packets:   █████▍                                                                          33688/500000 [00:00<00:13, 35784.19it/s][A
Packets:   █████▉                                                                          37263/500000 [00:01<00:12, 35709.23it/s][A
Packets:   ██████▌                                                                         40864/500000 [00:01<00:12, 35798.96it/s][A
Packets:   ███████                                                                         44471/500000 [00:01<00:12, 35876.50it/s][A
Packets:   ███████▋                                                                        48058/500000 [00:01<00:12, 35874.00it/s][A
Packets:   ████████▎                                                                       51727/500000 [00:01<00:12, 36117.03it/s][A
Packets:   ████████▊                                                                       55339/500000 [00:01<00:12, 35919.93it/s][A
Packets:   █████████▍                                                                      58932/500000 [00:01<00:12, 35917.61it/s][A
Packets:   ██████████                                                                      62524/500000 [00:01<00:12, 35763.12it/s][A
Packets:   ██████████▌                                                                     66133/500000 [00:01<00:12, 35858.57it/s][A
Packets:   ███████████▏                                                                    69719/500000 [00:01<00:12, 35715.61it/s][A
Packets:   ███████████▋                                                                    73302/500000 [00:02<00:11, 35744.54it/s][A
Packets:   ████████████▎                                                                   76938/500000 [00:02<00:11, 35921.21it/s][A
Packets:   ████████████▉                                                                   80531/500000 [00:02<00:11, 35889.40it/s][A
Packets:   █████████████▍                                                                  84121/500000 [00:02<00:11, 35873.21it/s][A
Packets:   ██████████████                                                                  87709/500000 [00:02<00:11, 35811.29it/s][A
Packets:   ██████████████▌                                                                 91291/500000 [00:02<00:11, 35608.34it/s][A
Packets:   ███████████████▏                                                                94853/500000 [00:02<00:11, 35478.52it/s][A
Packets:   ███████████████▋                                                                98402/500000 [00:02<00:11, 35343.51it/s][A
Packets:   ████████████████▎                                                               101960/500000 [00:02<00:11, 35412.98it/s][A
Packets:   ████████████████▉                                                               105590/500000 [00:02<00:11, 35673.70it/s][A
Packets:   █████████████████▍                                                              109158/500000 [00:03<00:10, 35662.30it/s][A
Packets:   ██████████████████                                                              112726/500000 [00:03<00:10, 35662.27it/s][A
Packets:   ██████████████████▌                                                             116297/500000 [00:03<00:10, 35674.73it/s][A
Packets:   ███████████████████▏                                                            119865/500000 [00:03<00:10, 35398.79it/s][A
Packets:   ███████████████████▊                                                            123441/500000 [00:03<00:10, 35501.89it/s][A
Packets:   ████████████████████▎                                                           127040/500000 [00:03<00:10, 35645.80it/s][A
Packets:   ████████████████████▉                                                           130605/500000 [00:03<00:10, 35043.37it/s][A
Packets:   █████████████████████▍                                                          134112/500000 [00:03<00:10, 35032.07it/s][A
Packets:   ██████████████████████                                                          137672/500000 [00:03<00:10, 35198.22it/s][A
Packets:   ██████████████████████▌                                                         141199/500000 [00:03<00:10, 35219.53it/s][A
Packets:   ███████████████████████▏                                                        144722/500000 [00:04<00:10, 34594.50it/s][A
Packets:   ███████████████████████▋                                                        148185/500000 [00:04<00:10, 34022.31it/s][A
Packets:   ████████████████████████▎                                                       151809/500000 [00:04<00:10, 34669.53it/s][A
Packets:   ████████████████████████▊                                                       155371/500000 [00:04<00:09, 34949.68it/s][A
Packets:   █████████████████████████▍                                                      158927/500000 [00:04<00:09, 35127.13it/s][A
Packets:   █████████████████████████▉                                                      162488/500000 [00:04<00:09, 35268.37it/s][A
Packets:   ██████████████████████████▌                                                     166017/500000 [00:04<00:09, 35261.71it/s][A
Packets:   ███████████████████████████▏                                                    169681/500000 [00:04<00:09, 35670.91it/s][A
Packets:   ███████████████████████████▋                                                    173279/500000 [00:04<00:09, 35761.91it/s][A
Packets:   ████████████████████████████▎                                                   176856/500000 [00:04<00:09, 35764.19it/s][A
Packets:   ████████████████████████████▊                                                   180433/500000 [00:05<00:08, 35676.64it/s][A
Packets:   █████████████████████████████▍                                                  184054/500000 [00:05<00:08, 35833.70it/s][A
Packets:   ██████████████████████████████                                                  187638/500000 [00:05<00:08, 35760.96it/s][A
Packets:   ██████████████████████████████▌                                                 191232/500000 [00:05<00:08, 35813.27it/s][A
Packets:   ███████████████████████████████▏                                                194814/500000 [00:05<00:08, 35730.98it/s][A
Packets:   ███████████████████████████████▋                                                198388/500000 [00:05<00:08, 35693.30it/s][A
Packets:   ████████████████████████████████▎                                               201958/500000 [00:05<00:08, 35620.73it/s][A
Packets:   ████████████████████████████████▉                                               205554/500000 [00:05<00:08, 35714.63it/s][A
Packets:   █████████████████████████████████▍                                              209126/500000 [00:05<00:08, 35627.31it/s][A
Packets:   ██████████████████████████████████                                              212701/500000 [00:05<00:08, 35663.08it/s][A
Packets:   ██████████████████████████████████▌                                             216303/500000 [00:06<00:07, 35768.60it/s][A
Packets:   ███████████████████████████████████▏                                            219887/500000 [00:06<00:07, 35789.50it/s][A
Packets:   ███████████████████████████████████▊                                            223467/500000 [00:06<00:07, 35577.83it/s][A
Packets:   ████████████████████████████████████▎                                           227036/500000 [00:06<00:07, 35610.46it/s][A
Packets:   ████████████████████████████████████▉                                           230598/500000 [00:06<00:07, 35486.03it/s][A
Packets:   █████████████████████████████████████▍                                          234193/500000 [00:06<00:07, 35620.93it/s][A
Packets:   ██████████████████████████████████████                                          237756/500000 [00:06<00:07, 35599.60it/s][A
Packets:   ██████████████████████████████████████▌                                         241317/500000 [00:06<00:07, 35429.55it/s][A
Packets:   ███████████████████████████████████████▏                                        244861/500000 [00:06<00:07, 35430.81it/s][A
Packets:   ███████████████████████████████████████▋                                        248405/500000 [00:06<00:07, 35390.86it/s][A
Packets:   ████████████████████████████████████████▎                                       251945/500000 [00:07<00:07, 35385.53it/s][A
Packets:   ████████████████████████████████████████▉                                       255506/500000 [00:07<00:06, 35451.34it/s][A
Packets:   █████████████████████████████████████████▍                                      259052/500000 [00:07<00:06, 35388.81it/s][A
Packets:   ██████████████████████████████████████████                                      262664/500000 [00:07<00:06, 35604.66it/s][A
Packets:   ██████████████████████████████████████████▌                                     266225/500000 [00:07<00:06, 35473.44it/s][A
Packets:   ███████████████████████████████████████████▏                                    269773/500000 [00:07<00:06, 35380.13it/s][A
Packets:   ███████████████████████████████████████████▋                                    273312/500000 [00:07<00:06, 34823.53it/s][A
Packets:   ████████████████████████████████████████████▎                                   276797/500000 [00:07<00:06, 34806.82it/s][A
Packets:   ████████████████████████████████████████████▊                                   280327/500000 [00:07<00:06, 34952.03it/s][A
Packets:   █████████████████████████████████████████████▍                                  283890/500000 [00:07<00:06, 35152.80it/s][A
Packets:   █████████████████████████████████████████████▉                                  287407/500000 [00:08<00:06, 35137.74it/s][A
Packets:   ██████████████████████████████████████████████▌                                 290930/500000 [00:08<00:05, 35164.81it/s][A
Packets:   ███████████████████████████████████████████████                                 294499/500000 [00:08<00:05, 35320.34it/s][A
Packets:   ███████████████████████████████████████████████▋                                298087/500000 [00:08<00:05, 35483.75it/s][A
Packets:   ████████████████████████████████████████████████▎                               301662/500000 [00:08<00:05, 35562.83it/s][A
Packets:   ████████████████████████████████████████████████▊                               305305/500000 [00:08<00:05, 35821.61it/s][A
Packets:   █████████████████████████████████████████████████▍                              308888/500000 [00:08<00:05, 35815.28it/s][A
Packets:   █████████████████████████████████████████████████▉                              312470/500000 [00:08<00:05, 35725.72it/s][A
Packets:   ██████████████████████████████████████████████████▌                             316061/500000 [00:08<00:05, 35780.84it/s][A
Packets:   ███████████████████████████████████████████████████▏                            319640/500000 [00:08<00:05, 35770.87it/s][A
Packets:   ███████████████████████████████████████████████████▋                            323267/500000 [00:09<00:04, 35919.08it/s][A
Packets:   ████████████████████████████████████████████████████▎                           326859/500000 [00:09<00:04, 35815.18it/s][A
Packets:   ████████████████████████████████████████████████████▊                           330441/500000 [00:09<00:04, 35777.51it/s][A
Packets:   █████████████████████████████████████████████████████▍                          334062/500000 [00:09<00:04, 35901.65it/s][A
Packets:   ██████████████████████████████████████████████████████                          337680/500000 [00:09<00:04, 35984.43it/s][A
Packets:   ██████████████████████████████████████████████████████▌                         341296/500000 [00:09<00:04, 36036.47it/s][A
Packets:   ███████████████████████████████████████████████████████▏                        344926/500000 [00:09<00:04, 36115.44it/s][A
Packets:   ███████████████████████████████████████████████████████▊                        348538/500000 [00:09<00:04, 35864.52it/s][A
Packets:   ████████████████████████████████████████████████████████▎                       352125/500000 [00:09<00:04, 35847.55it/s][A
Packets:   ████████████████████████████████████████████████████████▉                       355711/500000 [00:09<00:04, 35736.63it/s][A
Packets:   █████████████████████████████████████████████████████████▍                      359309/500000 [00:10<00:03, 35809.00it/s][A
Packets:   ██████████████████████████████████████████████████████████                      362891/500000 [00:10<00:03, 35678.19it/s][A
Packets:   ██████████████████████████████████████████████████████████▋                     366460/500000 [00:10<00:03, 35656.41it/s][A
Packets:   ███████████████████████████████████████████████████████████▏                    370072/500000 [00:10<00:03, 35786.97it/s][A
Packets:   ███████████████████████████████████████████████████████████▊                    373651/500000 [00:10<00:03, 35752.25it/s][A
Packets:   ████████████████████████████████████████████████████████████▎                   377261/500000 [00:10<00:03, 35849.15it/s][A
Packets:   ████████████████████████████████████████████████████████████▉                   380847/500000 [00:10<00:03, 35654.45it/s][A
Packets:   █████████████████████████████████████████████████████████████▌                  384447/500000 [00:10<00:03, 35755.51it/s][A
Packets:   ██████████████████████████████████████████████████████████████                  388023/500000 [00:10<00:03, 35756.30it/s][A
Packets:   ██████████████████████████████████████████████████████████████▋                 391611/500000 [00:10<00:03, 35790.72it/s][A
Packets:   ███████████████████████████████████████████████████████████████▏                395236/500000 [00:11<00:02, 35925.84it/s][A
Packets:   ███████████████████████████████████████████████████████████████▊                398842/500000 [00:11<00:02, 35965.91it/s][A
Packets:   ████████████████████████████████████████████████████████████████▍               402439/500000 [00:11<00:02, 35809.22it/s][A
Packets:   ████████████████████████████████████████████████████████████████▉               406066/500000 [00:11<00:02, 35945.51it/s][A
Packets:   █████████████████████████████████████████████████████████████████▌              409663/500000 [00:11<00:02, 35952.77it/s][A
Packets:   ██████████████████████████████████████████████████████████████████              413259/500000 [00:11<00:02, 35947.32it/s][A
Packets:   ██████████████████████████████████████████████████████████████████▋             416885/500000 [00:11<00:02, 36040.77it/s][A
Packets:   ███████████████████████████████████████████████████████████████████▎            420490/500000 [00:11<00:02, 35622.27it/s][A
Packets:   ███████████████████████████████████████████████████████████████████▊            424117/500000 [00:11<00:02, 35814.72it/s][A
Packets:   ████████████████████████████████████████████████████████████████████▍           427700/500000 [00:12<00:02, 35752.14it/s][A
Packets:   █████████████████████████████████████████████████████████████████████           431286/500000 [00:12<00:01, 35783.59it/s][A
Packets:   █████████████████████████████████████████████████████████████████████▌          434888/500000 [00:12<00:01, 35853.19it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████▏         438475/500000 [00:12<00:01, 35855.70it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████▋         442066/500000 [00:12<00:01, 35870.56it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████▎        445654/500000 [00:12<00:01, 35781.32it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████▉        449233/500000 [00:12<00:01, 35739.57it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████▍       452821/500000 [00:12<00:01, 35777.46it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████       456437/500000 [00:12<00:01, 35891.33it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████▌      460027/500000 [00:12<00:01, 35807.21it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████████▏     463608/500000 [00:13<00:01, 35515.10it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████████▊     467188/500000 [00:13<00:00, 35597.63it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████████▎    470749/500000 [00:13<00:00, 35564.14it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████████▉    474306/500000 [00:13<00:00, 35384.37it/s][A
Packets:   ████████████████████████████████████████████████████████████████████████████▍   477845/500000 [00:13<00:00, 35291.31it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████   481416/500000 [00:13<00:00, 35413.63it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▌  484958/500000 [00:13<00:00, 35236.76it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████████████▏ 488502/500000 [00:13<00:00, 35296.32it/s][A
Packets:   ██████████████████████████████████████████████████████████████████████████████▋ 492046/500000 [00:13<00:00, 35338.38it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████████████▎495581/500000 [00:13<00:00, 35261.03it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████████████▊499114/500000 [00:14<00:00, 35281.47it/s][AIterations:                                                                                17/? [08:31<00:00, 10.03s/it]
Packets:   ████████████████████████████████████████████████████████████████████████████████500000/500000 [00:15<00:00, 35281.47it/s][A
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
INFO     tardis.io.atom_data.util:util.py:34 
	Atom Data kurucz_cd23_chianti_H_He.h5 not found in local path.
	Exists in TARDIS Data repo /home/aryaatharva18/Downloads/tardis-data/kurucz_cd23_chianti_H_He.h5
INFO     tardis.io.atom_data.base:base.py:258 Reading Atom Data with: UUID = 6f7b09e887a311e7a06b246e96350010 MD5  = 864f1753714343c41f99cb065710cace 
INFO     tardis.io.atom_data.base:base.py:262 Non provided Atomic Data: synpp_refs, photoionization_data, yg_data, two_photon_data, linelist_atoms, linelist_molecules
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 5
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.104e+42 erg / s
	Luminosity absorbed  = 2.674e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s

INFO     tardis.simulation.base:base.py:649 
	Plasma stratification:
INFO     tardis.simulation.base:base.py:650 
	Shell No.    t_rad    next_t_rad    w   next_w
	0         9.97e+03 K  1.01e+04 K   0.4   0.449
	5         9.89e+03 K  1.01e+04 K 0.211   0.201
	10        9.82e+03 K     1e+04 K 0.143   0.129
	15        9.75e+03 K  9.85e+03 K 0.105  0.0953

INFO     tardis.simulation.base:base.py:652 
	Current t_inner = 9974.969 K
	Expected t_inner for next iteration = 10736.784 K

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 2 of 5
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 1.084e+43 erg / s
	Luminosity absorbed  = 3.625e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s

INFO     tardis.simulation.base:base.py:649 
	Plasma stratification:
INFO     tardis.simulation.base:base.py:650 
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.01e+04 K  1.05e+04 K  0.449    0.48
	5         1.01e+04 K  1.06e+04 K  0.201   0.202
	10           1e+04 K  1.04e+04 K  0.129   0.126
	15        9.85e+03 K  1.02e+04 K 0.0953  0.0935

INFO     tardis.simulation.base:base.py:652 
	Current t_inner = 10736.784 K
	Expected t_inner for next iteration = 10718.886 K

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 3 of 5
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 1.086e+43 erg / s
	Luminosity absorbed  = 3.508e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s

INFO     tardis.simulation.base:base.py:260 Iteration converged 1/4 consecutive times.
INFO     tardis.simulation.base:base.py:649 
	Plasma stratification:
INFO     tardis.simulation.base:base.py:650 
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.05e+04 K  1.07e+04 K   0.48    0.49
	5         1.06e+04 K  1.09e+04 K  0.202   0.198
	10        1.04e+04 K  1.07e+04 K  0.126   0.124
	15        1.02e+04 K  1.04e+04 K 0.0935  0.0923

INFO     tardis.simulation.base:base.py:652 
	Current t_inner = 10718.886 K
	Expected t_inner for next iteration = 10695.170 K

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 4 of 5
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 1.082e+43 erg / s
	Luminosity absorbed  = 3.430e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s

INFO     tardis.simulation.base:base.py:260 Iteration converged 2/4 consecutive times.
INFO     tardis.simulation.base:base.py:649 
	Plasma stratification:
INFO     tardis.simulation.base:base.py:650 
	Shell No.    t_rad    next_t_rad    w    next_w
	0         1.07e+04 K  1.09e+04 K   0.49   0.488
	5         1.09e+04 K   1.1e+04 K  0.198   0.193
	10        1.07e+04 K  1.08e+04 K  0.124   0.122
	15        1.04e+04 K  1.05e+04 K 0.0923  0.0906

INFO     tardis.simulation.base:base.py:652 
	Current t_inner = 10695.170 K
	Expected t_inner for next iteration = 10682.561 K

INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 4 iterations 
	Simulation took 10.99 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 5 of 5
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 1.074e+43 erg / s
	Luminosity absorbed  = 3.442e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
______________________ TestTransportSimple.test_spectrum _______________________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f0f20ecc7a0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed475ed80>

    def test_spectrum(self, simulation):
        key = "simulation/spectrum_solver/spectrum_real_packets/luminosity"
        expected = self.get_expected_data(key)
    
        luminosity = u.Quantity(expected, "erg /s")
    
>       assert_quantity_allclose(
            simulation.spectrum_solver.spectrum_real_packets.luminosity,
            luminosity,
        )

tardis/tests/test_tardis_full.py:81: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee90332e0>, array([1.47106443e+39, 1.69486782e+39, 1.38661095e+39,...), array([1.47119190e+39, 1.69564189e+39, 1.35368464e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 4783 / 10000 (47.8%)
E           Max absolute difference among violations: 1.1803545e+39
E           Max relative difference among violations: 4.31231392
E            ACTUAL: array([1.471064e+39, 1.694868e+39, 1.386611e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.471192e+39, 1.695642e+39, 1.353685e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__________________ TestTransportSimple.test_virtual_spectrum ___________________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f0f20ecc9e0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed475ed80>

    def test_virtual_spectrum(self, simulation):
        key = "simulation/spectrum_solver/spectrum_virtual_packets/luminosity"
        expected = self.get_expected_data(key)
    
        luminosity = u.Quantity(expected, "erg /s")
    
>       assert_quantity_allclose(
            simulation.spectrum_solver.spectrum_virtual_packets.luminosity,
            luminosity,
        )

tardis/tests/test_tardis_full.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ecc7b45e0>, array([1.43474324e+39, 1.36762963e+39, 1.39613134e+39,...), array([1.44033177e+39, 1.35611403e+39, 1.39755698e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 5925 / 10000 (59.2%)
E           Max absolute difference among violations: 3.03195861e+38
E           Max relative difference among violations: 21041.9645284
E            ACTUAL: array([1.434743e+39, 1.367630e+39, 1.396131e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.440332e+39, 1.356114e+39, 1.397557e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-downbranch] ____

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecd370>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed431c620>
request = <FixtureRequest for <Function test_j_blue_estimators[-1-downbranch]>>

    def test_j_blue_estimators(self, simulation, request):
        regression_data = RegressionData(request)
        j_blue_estimator = (
            simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
        )
        expected = regression_data.sync_ndarray(j_blue_estimator)
>       npt.assert_allclose(j_blue_estimator, expected)

tardis/tests/test_tardis_full_formal_integral.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4ce80cc0>, array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., .....,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 442954 / 584480 (75.8%)
E           Max absolute difference among violations: 8.01824362e-19
E           Max relative difference among violations: 8.46146562
E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...
E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________ TestTransportSimpleFormalIntegral.test_spectrum[-1-downbranch] ________

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecc830>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed431c620>
request = <FixtureRequest for <Function test_spectrum[-1-downbranch]>>

    def test_spectrum(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4f795a80>, array([2.01762966e+39, 1.58287171e+39, 1.28448103e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 3760 / 10000 (37.6%)
E           Max absolute difference among violations: 3.02096637e+39
E           Max relative difference among violations: 5.87366788
E            ACTUAL: array([2.017630e+39, 1.582872e+39, 1.284481e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] ___

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecdcd0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0ed431c620>
request = <FixtureRequest for <Function test_spectrum_integrated[-1-downbranch]>>

    def test_spectrum_integrated(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee92763e0>, array([1.54239369e+39, 1.54471048e+39, 1.53959524e+39,...), array([1.55114238e+39, 1.55522613e+39, 1.54887955e+39, ...,
       2.25671263e+31, 2.27943572e+31, 2.24394350e+31]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 10000 / 10000 (100%)
E           Max absolute difference among violations: 7.22899675e+37
E           Max relative difference among violations: 19.3073128
E            ACTUAL: array([1.542394e+39, 1.544710e+39, 1.539595e+39, ..., 2.246822e+31,
E                  2.268272e+31, 2.225999e+31])
E            DESIRED: array([1.551142e+39, 1.555226e+39, 1.548880e+39, ..., 2.256713e+31,
E                  2.279436e+31, 2.243943e+31])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-macroatom] ____

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecd880>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e33c7d7c0>
request = <FixtureRequest for <Function test_j_blue_estimators[-1-macroatom]>>

    def test_j_blue_estimators(self, simulation, request):
        regression_data = RegressionData(request)
        j_blue_estimator = (
            simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
        )
        expected = regression_data.sync_ndarray(j_blue_estimator)
>       npt.assert_allclose(j_blue_estimator, expected)

tardis/tests/test_tardis_full_formal_integral.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4ce294e0>, array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., .....,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 447216 / 584480 (76.5%)
E           Max absolute difference among violations: 7.31166044e-19
E           Max relative difference among violations: 8.28953452
E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...
E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________ TestTransportSimpleFormalIntegral.test_spectrum[-1-macroatom] _________

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecde50>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e33c7d7c0>
request = <FixtureRequest for <Function test_spectrum[-1-macroatom]>>

    def test_spectrum(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e63e9f600>, array([1.88212833e+39, 1.30680905e+39, 1.43502890e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 4099 / 10000 (41%)
E           Max absolute difference among violations: 3.04011185e+39
E           Max relative difference among violations: 5.85885466
E            ACTUAL: array([1.882128e+39, 1.306809e+39, 1.435029e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] ___

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ece420>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e33c7d7c0>
request = <FixtureRequest for <Function test_spectrum_integrated[-1-macroatom]>>

    def test_spectrum_integrated(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e63e9cc20>, array([1.54231806e+39, 1.55225124e+39, 1.54284817e+39,...), array([1.54556181e+39, 1.55660766e+39, 1.54591210e+39, ...,
       1.35260736e+31, 1.33049749e+31, 1.29446216e+31]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 10000 / 10000 (100%)
E           Max absolute difference among violations: 6.03670637e+37
E           Max relative difference among violations: 9.913521
E            ACTUAL: array([1.542318e+39, 1.552251e+39, 1.542848e+39, ..., 1.336556e+31,
E                  1.315549e+31, 1.281291e+31])
E            DESIRED: array([1.545562e+39, 1.556608e+39, 1.545912e+39, ..., 1.352607e+31,
E                  1.330497e+31, 1.294462e+31])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-macroatom] ____

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecda90>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e44bfe630>
request = <FixtureRequest for <Function test_j_blue_estimators[30-macroatom]>>

    def test_j_blue_estimators(self, simulation, request):
        regression_data = RegressionData(request)
        j_blue_estimator = (
            simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
        )
        expected = regression_data.sync_ndarray(j_blue_estimator)
>       npt.assert_allclose(j_blue_estimator, expected)

tardis/tests/test_tardis_full_formal_integral.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0f06798720>, array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., .....,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 447216 / 584480 (76.5%)
E           Max absolute difference among violations: 7.31166044e-19
E           Max relative difference among violations: 8.28953452
E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...
E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________ TestTransportSimpleFormalIntegral.test_spectrum[30-macroatom] _________

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ece060>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e44bfe630>
request = <FixtureRequest for <Function test_spectrum[30-macroatom]>>

    def test_spectrum(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4cec6de0>, array([1.88212833e+39, 1.30680905e+39, 1.43502890e+39,...), array([1.74559473e+39, 1.44727718e+39, 1.29383198e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 4099 / 10000 (41%)
E           Max absolute difference among violations: 3.04011185e+39
E           Max relative difference among violations: 5.85885466
E            ACTUAL: array([1.882128e+39, 1.306809e+39, 1.435029e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.745595e+39, 1.447277e+39, 1.293832e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] ___

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ece630>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e44bfe630>
request = <FixtureRequest for <Function test_spectrum_integrated[30-macroatom]>>

    def test_spectrum_integrated(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e63ea2a20>, array([1.54085030e+39, 1.54785895e+39, 1.54018958e+39,...), array([1.54421084e+39, 1.55253343e+39, 1.54295780e+39, ...,
       1.27325829e+31, 1.26097974e+31, 1.22258748e+31]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 10000 / 10000 (100%)
E           Max absolute difference among violations: 5.49004665e+37
E           Max relative difference among violations: 9.345234
E            ACTUAL: array([1.540850e+39, 1.547859e+39, 1.540190e+39, ..., 1.173083e+31,
E                  1.146857e+31, 1.117191e+31])
E            DESIRED: array([1.544211e+39, 1.552533e+39, 1.542958e+39, ..., 1.273258e+31,
E                  1.260980e+31, 1.222587e+31])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___ TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-downbranch] ____

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecd9d0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e57589880>
request = <FixtureRequest for <Function test_j_blue_estimators[30-downbranch]>>

    def test_j_blue_estimators(self, simulation, request):
        regression_data = RegressionData(request)
        j_blue_estimator = (
            simulation.transport.transport_state.radfield_mc_estimators.j_blue_estimator
        )
        expected = regression_data.sync_ndarray(j_blue_estimator)
>       npt.assert_allclose(j_blue_estimator, expected)

tardis/tests/test_tardis_full_formal_integral.py:85: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0edc144fe0>, array([[0., 0., 0., ..., 0., 0., 0.],
       [0., 0., .....,
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.],
       [0., 0., 0., ..., 0., 0., 0.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 442954 / 584480 (75.8%)
E           Max absolute difference among violations: 8.01824362e-19
E           Max relative difference among violations: 8.46146562
E            ACTUAL: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...
E            DESIRED: array([[0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],
E                  [0., 0., 0., ..., 0., 0., 0.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________ TestTransportSimpleFormalIntegral.test_spectrum[30-downbranch] ________

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ecdfa0>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e57589880>
request = <FixtureRequest for <Function test_spectrum[30-downbranch]>>

    def test_spectrum(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_real_packets.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:92: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e44bdede0>, array([2.01762966e+39, 1.58287171e+39, 1.28448103e+39,...), array([2.16554068e+39, 1.29492551e+39, 1.28560928e+39, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 3760 / 10000 (37.6%)
E           Max absolute difference among violations: 3.02096637e+39
E           Max relative difference among violations: 5.87366788
E            ACTUAL: array([2.017630e+39, 1.582872e+39, 1.284481e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([2.165541e+39, 1.294926e+39, 1.285609e+39, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__ TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] ___

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f0f20ece570>
simulation = <tardis.simulation.base.Simulation object at 0x7f0e57589880>
request = <FixtureRequest for <Function test_spectrum_integrated[30-downbranch]>>

    def test_spectrum_integrated(self, simulation, request):
        regression_data = RegressionData(request)
        luminosity = simulation.spectrum_solver.spectrum_integrated.luminosity
        expected = regression_data.sync_ndarray(luminosity.cgs.value)
        expected = u.Quantity(expected, "erg /s")
>       assert_quantity_allclose(luminosity, expected)

tardis/tests/test_tardis_full_formal_integral.py:99: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/astropy/tests/helper.py:203: in assert_quantity_allclose
    np.testing.assert_allclose(
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e44bdff60>, array([1.54088344e+39, 1.54038935e+39, 1.53613853e+39,...), array([1.54917411e+39, 1.55043938e+39, 1.54507053e+39, ...,
       2.08252810e+31, 2.08867593e+31, 2.06027793e+31]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 10000 / 10000 (100%)
E           Max absolute difference among violations: 7.72948946e+37
E           Max relative difference among violations: 17.81369197
E            ACTUAL: array([1.540883e+39, 1.540389e+39, 1.536139e+39, ..., 2.081039e+31,
E                  2.087889e+31, 2.059957e+31])
E            DESIRED: array([1.549174e+39, 1.550439e+39, 1.545071e+39, ..., 2.082528e+31,
E                  2.088676e+31, 2.060278e+31])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
__________________________ test_montecarlo_main_loop ___________________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0f20ef06b0>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>

    def test_montecarlo_main_loop(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_simulation = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=False,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation.run_convergence()
        montecarlo_main_loop_simulation.run_final()
    
        expected_hdf_store = regression_data.sync_hdf_store(
            montecarlo_main_loop_simulation
        )
    
        # Load compare data from refdata
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_hdf_store.close()
        transport_state = montecarlo_main_loop_simulation.transport.transport_state
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = (
            transport_state.radfield_mc_estimators.nu_bar_estimator
        )
        actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
    
        # Compare
>       npt.assert_allclose(
            actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-13
        )

tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e55116fc0>, array([9.40448351e+28, 8.06019278e+28, 7.19997537e+28,....88449508e+28, 3.76156653e+28, 3.64401717e+28,
       3.53517538e+28, 3.45355503e+28, 3.34541304e+28, 3.26838651e+28]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-13, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-13, atol=0
E           
E           Mismatched elements: 20 / 20 (100%)
E           Max absolute difference among violations: 6.92504451e+25
E           Max relative difference among violations: 0.00085843
E            ACTUAL: array([9.404484e+28, 8.060193e+28, 7.199975e+28, 6.546968e+28,
E                  6.034739e+28, 5.613400e+28, 5.251242e+28, 4.985184e+28,
E                  4.726437e+28, 4.509526e+28, 4.320081e+28, 4.151235e+28,...
E            DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
E                  6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
E                  4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------

Packets:                                                                                   12515/? [00:06<00:00, 1929.41it/s][A
Packets:                                                                                   24466/? [00:06<00:00, 4463.19it/s][A
Packets:                                                                                   36451/? [00:06<00:00, 7909.24it/s][A
Packets:                                                                                   48464/? [00:06<00:00, 12501.18it/s][A
Packets:                                                                                   60697/? [00:06<00:00, 18566.64it/s][A
Packets:                                                                                   72695/? [00:06<00:00, 25982.52it/s][A
Packets:                                                                                   84725/? [00:07<00:00, 34903.47it/s][A
Packets:                                                                                   97004/? [00:07<00:00, 45364.95it/s][AIterations:                                                                                40/? [09:37<00:00,  4.02s/it]
Packets:                                                                                   104009/? [00:07<00:00, 45364.95it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
____________________ test_montecarlo_main_loop_vpacket_log _____________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0ed477fc50>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>

    def test_montecarlo_main_loop_vpacket_log(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_config.montecarlo.no_of_virtual_packets = 5
    
        montecarlo_main_loop_simulation = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=True,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation.run_convergence()
        montecarlo_main_loop_simulation.run_final()
    
        transport = montecarlo_main_loop_simulation.transport
    
        assert transport.montecarlo_configuration.ENABLE_VPACKET_TRACKING is True
    
        expected_hdf_store = regression_data.sync_hdf_store(
            montecarlo_main_loop_simulation
        )
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_vpacket_log_nus = expected_hdf_store[
            "/simulation/transport/transport_state/virt_packet_nus"
        ]
        expected_vpacket_log_energies = expected_hdf_store[
            "/simulation/transport/transport_state/virt_packet_energies"
        ]
    
        transport_state = transport.transport_state
    
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = transport_state.nu_bar_estimator
        actual_j_estimator = transport_state.j_estimator
        actual_vpacket_log_nus = transport_state.vpacket_tracker.nus
        actual_vpacket_log_energies = transport_state.vpacket_tracker.energies
    
        expected_hdf_store.close()
        # Compare
>       npt.assert_allclose(
            actual_nu_bar_estimator,
            expected_nu_bar_estimator,
            rtol=1e-12,
            atol=1e-15,
        )

tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e38da0a40>, array([9.39632189e+28, 8.06452049e+28, 7.18754600e+28,....86491193e+28, 3.76603462e+28, 3.65184134e+28,
       3.55625311e+28, 3.45809153e+28, 3.35093337e+28, 3.25549805e+28]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-12, atol=1e-15', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-12, atol=1e-15
E           
E           Mismatched elements: 20 / 20 (100%)
E           Max absolute difference among violations: 2.81924274e+25
E           Max relative difference among violations: 0.0005693
E            ACTUAL: array([9.396322e+28, 8.064520e+28, 7.187546e+28, 6.550714e+28,
E                  6.032264e+28, 5.628320e+28, 5.284222e+28, 4.954908e+28,
E                  4.717867e+28, 4.492582e+28, 4.303848e+28, 4.140613e+28,...
E            DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
E                  6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
E                  4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.135e+42 erg / s
	Luminosity absorbed  = 2.646e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------

Packets:                                                                                   108813/? [00:08<00:00, 16140.70it/s][A
Packets:                                                                                   117136/? [00:09<00:00, 18515.46it/s][A
Packets:                                                                                   123981/? [00:09<00:00, 20645.63it/s][A
Packets:                                                                                   129811/? [00:09<00:00, 22594.71it/s][A
Packets:                                                                                   134937/? [00:09<00:00, 24371.86it/s][A
Packets:                                                                                   139565/? [00:09<00:00, 26107.16it/s][A
Packets:                                                                                   143869/? [00:09<00:00, 27698.47it/s][A
Packets:                                                                                   147942/? [00:10<00:00, 29166.64it/s][A
Packets:                                                                                   151858/? [00:10<00:00, 30386.47it/s][A
Packets:                                                                                   155651/? [00:10<00:00, 31401.50it/s][A
Packets:                                                                                   159354/? [00:10<00:00, 32378.83it/s][A
Packets:                                                                                   163013/? [00:10<00:00, 33057.91it/s][A
Packets:                                                                                   166627/? [00:10<00:00, 33767.59it/s][A
Packets:                                                                                   170231/? [00:10<00:00, 34339.16it/s][A
Packets:                                                                                   173831/? [00:10<00:00, 34571.82it/s][A
Packets:                                                                                   177444/? [00:10<00:00, 35007.97it/s][A
Packets:                                                                                   181030/? [00:11<00:00, 35194.29it/s][A
Packets:                                                                                   184622/? [00:11<00:00, 35404.69it/s][A
Packets:                                                                                   188206/? [00:11<00:00, 35521.32it/s][A
Packets:                                                                                   191789/? [00:11<00:00, 35602.83it/s][A
Packets:                                                                                   195371/? [00:11<00:00, 35419.45it/s][A
Packets:                                                                                   198928/? [00:11<00:00, 35289.00it/s][A
Packets:                                                                                   202490/? [00:11<00:00, 35385.29it/s][AIterations:                                                                                41/? [09:41<00:00,  4.16s/it]
Packets:                                                                                   204009/? [00:11<00:00, 35385.29it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.135e+42 erg / s
	Luminosity absorbed  = 2.646e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
__________________________ test_boundary_interactions __________________________

rpacket_tracker = ListType[instance.jitclass.RPacketTracker#7f0f40fdce60<seed:int64,index:int64,status:array(int64, 1d, A),r:array(float...PacketTracker object at 0x7f0ee921fd00>, <numba.experimental.jitclass.boxing.RPacketTracker object at 0x7f0ed4589390>])
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0e39139400>

    def test_boundary_interactions(rpacket_tracker, regression_data):
        no_of_packets = len(rpacket_tracker)
    
        # Hard coding the number of columns
        # Based on the largest size of boundary_interaction array (60)
        obtained_boundary_interaction = np.full(
            (no_of_packets, 64),
            [-1],
            dtype=rpacket_tracker[0].boundary_interaction.dtype,
        )
    
        for i, tracker in enumerate(rpacket_tracker):
>           obtained_boundary_interaction[
                i, : tracker.boundary_interaction.size
            ] = tracker.boundary_interaction
E           ValueError: could not broadcast input array from shape (77,) into shape (64,)

tardis/transport/montecarlo/tests/test_rpacket_tracker.py:147: ValueError
______________________ test_montecarlo_main_loop_weighted ______________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f0e5434da30>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
simple_weighted_packet_source = <tardis.transport.montecarlo.weighted_packet_source.BlackBodyWeightedSource object at 0x7f0e54fe1790>

    def test_montecarlo_main_loop_weighted(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
        simple_weighted_packet_source,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_simulation_weighted = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=False,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation_weighted.packet_source = (
            simple_weighted_packet_source
        )
        montecarlo_main_loop_simulation_weighted.run_convergence()
        montecarlo_main_loop_simulation_weighted.run_final()
    
        # Get the montecarlo simple regression data
        regression_data_dir = (
            regression_data.absolute_regression_data_dir.absolute().parents[0]
            / "test_montecarlo_main_loop/test_montecarlo_main_loop.h5"
        )
        expected_hdf_store = pd.HDFStore(regression_data_dir, mode="r")
    
        # Load compare data from refdata
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_hdf_store.close()
        transport_state = (
            montecarlo_main_loop_simulation_weighted.transport.transport_state
        )
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = (
            transport_state.radfield_mc_estimators.nu_bar_estimator
        )
        actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
    
        # Compare
        npt.assert_allclose(
            actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-2
        )
        npt.assert_allclose(actual_j_estimator, expected_j_estimator, rtol=1e-2)
>       npt.assert_allclose(actual_energy, expected_energy, rtol=1e-2)

tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0edc0b3d80>, array([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-...ay([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05, ...,
        1.03375439e-05, -9.75713585e-06,  1.01976360e-05]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.01, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.01, atol=0
E           
E           Mismatched elements: 75 / 100000 (0.075%)
E           Max absolute difference among violations: 2.01554089e-05
E           Max relative difference among violations: 2.08104546
E            ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
E                  -9.757136e-06,  1.019764e-05])
E            DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
E                  -9.757136e-06,  1.019764e-05])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------

Packets:                                                                                   0/100000 [00:00<?, ?it/s]            [A
Packets:                                                                                   0/100000 [00:00<?, ?it/s][A
Packets:   █████████▍                                                                      11775/100000 [00:00<00:00, 117748.71it/s][A
Packets:   ███████████████████▏                                                            23921/100000 [00:00<00:00, 119927.84it/s][A
Packets:   ████████████████████████████▉                                                   36105/100000 [00:00<00:00, 120799.82it/s][A
Packets:   ██████████████████████████████████████▋                                         48352/100000 [00:00<00:00, 121456.82it/s][A
Packets:   ████████████████████████████████████████████████▍                               60498/100000 [00:00<00:00, 121446.21it/s][A
Packets:   ██████████████████████████████████████████████████████████                      72643/100000 [00:00<00:00, 121241.36it/s][A
Packets:   ███████████████████████████████████████████████████████████████████▊            84781/100000 [00:00<00:00, 121284.12it/s][A
Packets:   █████████████████████████████████████████████████████████████████████████████▌  96910/100000 [00:00<00:00, 121168.41it/s][AIterations:                                                                                45/? [09:59<00:00,  3.83s/it]
Packets:   ███████████████████████████████████████████████████████████████████████████████▉99999/100000 [00:00<00:00, 121168.41it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e38e30>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed4338fe0>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...1104.14894249, 11194.10880903, 12818.679236  ,
       12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (503,), (508,) mismatch)
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e392b0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed4382980>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...47464 ,
       12229.96880815, 12113.40540961, 12605.43283975, 12605.43283975,
       11152.96259546, 11172.04481521]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 558 / 558 (100%)
E           Max absolute difference among violations: 5978.84516144
E           Max relative difference among violations: 0.4321623
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e394f0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43391c0>, array([11193.08324978, 13536.93126023, 11647.60804688,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
       15754.62784966, 13174.4766832 , 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (134,), (147,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39730>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43c8680>, array([11193.08324978, 13536.93126023, 11647.60804688,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
       12229.96880815, 12113.40540961, 11152.96259546]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (147,), (159,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39970>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43c9da0>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...1104.14894249, 11194.10880903, 12818.679236  ,
       12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (503,), (508,) mismatch)
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39bb0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee90e1940>, array([11061.80943238, 12248.18222883, 11489.53606278,...), array([13692.75973672, 11362.93720064, 12466.53861691, ...,
       12605.43283975, 11152.96259546, 11172.04481521]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (1435,), (1466,) mismatch)
E            ACTUAL: array([11061.809432, 12248.182229, 11489.536063, ..., 13052.865391,
E                  11383.689745, 11102.237019])
E            DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
E                  11152.962595, 11172.044815])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors] _

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39c70>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors]>>
attribute = 'plot_colors'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43c9620>, array([0.        , 0.        , 0.5       , 1.        ,...   1.        , 1.        , 0.40740741, 0.        , 1.        ,
       0.5       , 0.        , 0.        , 1.        ]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (20,), (24,) mismatch)
E            ACTUAL: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      ])
E            DESIRED: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      , 0.5     , 0.      , 0.      , 1.      ])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39df0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43ca5c0>, array([11193.08324978, 13536.93126023, 11647.60804688,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
       15754.62784966, 13174.4766832 , 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (134,), (147,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e39fd0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43ca660>, array([11107.03324206, 11193.08324978, 13536.93126023,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
       12229.96880815, 12113.40540961, 11152.96259546]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (367,), (379,) mismatch)
E            ACTUAL: array([11107.033242, 11193.08325 , 13536.93126 , 11647.608047,
E                  11992.657901, 15280.372922, 11647.007285, 11787.879439,
E                  15144.426129, 11822.894648, 14558.460905, 11033.525762,...
E            DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
E                  11633.386223, 12079.529869, 11966.991343, 11263.637708,
E                  14098.493392, 13656.398245, 12124.454378, 11838.909334,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors] _

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3a0c0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors]>>
attribute = 'plot_colors'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43cb2e0>, array([0.        , 0.        , 0.5       , 1.        ,...   1.        , 1.        , 0.40740741, 0.        , 1.        ,
       0.5       , 0.        , 0.        , 1.        ]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (20,), (24,) mismatch)
E            ACTUAL: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      ])
E            DESIRED: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      , 0.5     , 0.      , 0.      , 1.      ])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl0] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e38b60>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0ecc68de20>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl0]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e451d34c0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:420)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:420 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl1] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3a510>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e30fe0aa0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl1]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e63ea3240>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl4] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3a900>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e30fe0590>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl4]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e318b37e0>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
         1,   0,   0,   5,   5,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 6 / 20 (30%)
E           Max absolute difference among violations: 18
E           Max relative difference among violations: 0.5
E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
E                    2,   5,   5,   5,   5,   0,   0])
E            DESIRED: array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
E                    1,   0,   0,   5,   5,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl5] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3a9c0>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0ed45c11f0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl5]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4e5f4400>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl7] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3ab40>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e633cdbb0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl7]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
                np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )
            else:
                assert np.array_equal(expected_values, actual_values)
    
        labels = expected["plot_data_hdf/scalars"]
        for index1, data in enumerate(fig.get_children()):
            if isinstance(data.get_label(), str):
                assert (
                    getattr(labels, "label" + str(index1)).decode()
                    == data.get_label()
                )
            if isinstance(data, Line2D):
>               np.testing.assert_allclose(
                    data.get_xydata(),
                    expected.get("plot_data_hdf/" + "data" + str(index1)),
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee90c0c20>, array([[1.10e+04, 6.00e+01],
       [1.19e+04, 6.00e+0...,
       [1.82e+04, 0.00e+00],
       [1.91e+04, 0.00e+00],
       [1.91e+04, 0.00e+00],
       [2.00e+04, 0.00e+00]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 12 / 40 (30%)
E           Max absolute difference among violations: 58.
E           Max relative difference among violations: 30.
E            ACTUAL: array([[1.10e+04, 6.00e+01],
E                  [1.19e+04, 6.00e+01],
E                  [1.19e+04, 3.10e+01],...
E            DESIRED: array([[1.10e+04, 2.00e+00],
E                  [1.19e+04, 2.00e+00],
E                  [1.19e+04, 1.00e+00],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply0] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3ae40>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e44b76270>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply0]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43311c0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:522)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:522 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply1] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3b8c0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e70870d70>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply1]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ecc6c3880>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply4] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3bcb0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0f0383da30>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(127, 0, 0)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply4]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ecc6c0f40>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
         1,   0,   0,   5,   5,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 6 / 20 (30%)
E           Max absolute difference among violations: 18
E           Max relative difference among violations: 0.5
E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
E                    2,   5,   5,   5,   5,   0,   0])
E            DESIRED: array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
E                    1,   0,   0,   5,   5,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply5] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3bd70>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0e30fe3230>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply5]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ecc6c2fc0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply7] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f0f20e3bef0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f0ee9e2ce00>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f0f03af91f0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply7]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
                np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )
            else:
                assert np.array_equal(expected_values, actual_values)
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x,
                expected.get(group + "x").values.flatten(),
                rtol=0.3,
                atol=3,
            )
>           np.testing.assert_allclose(
                data.y,
                expected.get(group + "y").values.flatten(),
                rtol=0.3,
                atol=3,
            )

tardis/visualization/tools/tests/test_liv_plot.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ecc6c1580>, array([60, 60, 31, 31, 18, 18, 12, 12,  7,  7,  5,  5,  0,  0,  0,  0,  1,
        1,  0,  0]), array([2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 12 / 20 (60%)
E           Max absolute difference among violations: 58
E           Max relative difference among violations: 30.
E            ACTUAL: array([60, 60, 31, 31, 18, 18, 12, 12,  7,  7,  5,  5,  0,  0,  0,  0,  1,
E                   1,  0,  0])
E            DESIRED: array([2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data0] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20e2b920>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee3d11820>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data0]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e6334a0c0>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data1] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c800e0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee3d10e00>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data1]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a88720>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data2] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80470>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ed44d3590>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data2]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee61af560>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data3] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80530>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee1433c80>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data3]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e633f63e0>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data4] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c805f0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee02bf2f0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data4]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed4383240>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data5] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c806b0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ed44d1bb0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data5]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee61c2f20>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data6] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80770>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee02bc7d0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data6]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a88cc0>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data7] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80830>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee02e7dd0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data7]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ee61db600>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data8] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c808f0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f3ac60>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data8]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a8aa20>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data9] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c809b0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ed44bd730>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data9]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a8ac00>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data10] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80a70>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ed44bf7a0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data10]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a894e0>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data11] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80b30>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f3b230>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data11]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a8b420>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data12] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80bf0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee02e7cb0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data12]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e6336b380>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data13] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80cb0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e63a08d40>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data13]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10adc9a0>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data14] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20e2b740>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f5cbf0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data14]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10addd00>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data15] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c80da0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e62750140>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data15]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10ade160>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply0] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c810a0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e62753da0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply0]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0ed43cbc40>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply1] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81160>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e7083f950>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply1]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a13560>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply2] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81550>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f5cbc0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply2]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e5b20>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply3] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81610>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e708818b0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply3]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e6980>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply4] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c816d0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e70841a60>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply4]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a13880>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply5] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c817c0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e70881220>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply5]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e5580>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply6] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c818b0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0ee0255c10>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply6]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e67a0>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply7] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81970>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e708188f0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply7]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a8b6a0>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply8] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81a30>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e4e555f70>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply8]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e47c0>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply9] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81af0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f5e480>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply9]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e10a13880>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply10] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81bb0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39ff4fb0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply10]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e7ec0>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply11] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81c70>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e4e554e60>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply11]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e5da0>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply12] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81d30>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e39f93ef0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply12]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e4180>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply13] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81df0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e70819cd0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply13]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e49a0>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply14] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81eb0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e7081b860>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply14]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e109e5300>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply15] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f0f20c81f70>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f0e31802cf0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f0ed44d2060>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply15]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f0e4cb514e0>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
=============================== warnings summary ===============================
tardis/io/configuration/config_validator.py:6
tardis/io/configuration/config_validator.py:6
  /home/aryaatharva18/tardis-main/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
  
  jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/jupyter_client/connect.py:22
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
  
  Jupyter is migrating its paths to use standard platformdirs
  given by the platformdirs library.  To remove this warning and
  see the appropriate new directories, set the environment variable
  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
  The use of platformdirs will be the default in `jupyter_core` v6

tardis/plasma/properties/__init__.py:17
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/properties/__init__.py:17: DeprecationWarning:
  
  The numpy.linalg.linalg has been made private and renamed to numpy.linalg._linalg. All public functions exported by it are available from numpy.linalg. Please use numpy.linalg.LinAlgError instead.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

tardis/io/tests/test_HDFWriter.py::test_multi_index_write
tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:276: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]

tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
  /home/aryaatharva18/tardis-main/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
  
  The current CMFGEN model parser is deprecated

tardis/io/tests/test_model_reader.py: 1 warning
tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
  
  The current CMFGEN model parser is deprecated

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
tardis/spectrum/tests/test_numba_formal_integral.py::test_intensity_black_body[0-1]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numexpr/expressions.py:285: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
tardis/spectrum/tests/test_numba_formal_integral.py::test_intensity_black_body[0-1]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numexpr/expressions.py:295: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
  /home/aryaatharva18/tardis-main/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
  
  [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m

tardis/model/tests/test_base.py: 6 warnings
tardis/model/tests/test_csvy_model.py: 2 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
  
  v_inner_boundary < 0, assuming default value

tardis/model/tests/test_base.py: 6 warnings
tardis/model/tests/test_csvy_model.py: 2 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
  
  v_outer_boundary < 0, assuming default value

tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_simple[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_empty[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_zeros[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/pickle.py:323: DeprecationWarning:
  
  numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.

tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
  
  A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
  The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
  
  For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.

tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/tables/atom.py:1279: DeprecationWarning:
  
  numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.

tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "atomic_mass" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "j_blues_norm_factor" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "j_blue_estimator" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "volume" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "r_inner" not found

tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/scipy/sparse/_dia.py:133: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
  /home/aryaatharva18/tardis-main/tardis/tardis/model/geometry/radial1d.py:71: UserWarning:
  
  Requesting inner boundary below inner shell. Extrapolating the inner cell

tardis/spectrum/tests/test_cuda_formal_integral.py::test_intensity_black_body_cuda[100000000000000.0-10000.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_trapezoid_integration_cuda[100.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_calculate_z_cuda[formal_integral_geometry0-0.0-0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_populate_z[formal_integral_geometry0-1e-05-0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_line_search_cuda[3000000000000.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_reverse_binary_search[3000000000000.0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numba/cuda/dispatcher.py:536: NumbaPerformanceWarning:
  
  [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m

tardis/spectrum/tests/test_cuda_formal_integral.py: 47 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numba/cuda/cudadrv/devicearray.py:888: NumbaPerformanceWarning:
  
  [1mHost array used in CUDA kernel will incur copy overhead to/from device.[0m

tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[1000.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[10000.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100000.0]
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/tests/test_numba_formal_integral.py:35: DeprecationWarning:
  
  `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.

tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/base.py:70: UserWarning:
  
  SpectrumSolver.spectrum_virtual_packets is zero. Please run the montecarlo simulation with no_of_virtual_packets > 0

tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/base.py:111: UserWarning:
  
  SpectrumSolver.integrator: The FormalIntegrator is not yet available.Please run the montecarlo simulation at least once.

tardis/tests/test_util.py::test_calculate_luminosity[string_io0-100 km-result0]
tardis/tests/test_util.py::test_calculate_luminosity[string_io1-500 km-result1]
  /home/aryaatharva18/tardis-main/tardis/tardis/util/base.py:188: DeprecationWarning:
  
  `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:736: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:758: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:779: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
  
  More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(FloatText).__init__(min=0).
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(HTML).__init__(indent=True).
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/qgrid/grid.py:30: DeprecationWarning:
  
  distutils Version classes are deprecated. Use packaging.version instead.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/ipywidgets/widgets/widget.py:303: DeprecationWarning:
  
  Widget registration using a string name has been deprecated. Widget registration now uses a plain `@register` decorator.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:553: DeprecationWarning:
  
  metadata {'sync': True} was set from the constructor. With traitlets 4.1, metadata should be set using the .tag() method, e.g., Int().tag(key1='value1', key2='value2')

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/qgrid/grid.py:838: DeprecationWarning:
  
  QgridWidget._grid_options_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:289: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:292: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->values] [items->None]

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
  
  The number of interpolate_shells was not specified. The value was set to 80.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity
FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[stimulated_emission_factor]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_lower_level_index]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_upper_level_index]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[beta_sobolev]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines] - Asser...
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[f_lu] - Assert...
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[tau_sobolevs]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_w]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_rad]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_electron_densities]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_inner]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[nu_bar_estimator]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[j_estimator]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[t_radiative]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[dilution_factor]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_nus]
FAILED tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_energies]
FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets
FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets_reabsorbed
FAILED tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_j_blue_estimators
FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_spectrum
FAILED tardis/tests/test_tardis_full.py::TestTransportSimple::test_virtual_spectrum
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-downbranch]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-downbranch]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-downbranch]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-downbranch]
FAILED tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch]
FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop
FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop_vpacket_log
FAILED tardis/transport/montecarlo/tests/test_rpacket_tracker.py::test_boundary_interactions
FAILED tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py::test_montecarlo_main_loop_weighted
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl0]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl1]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl4]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl5]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl7]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply0]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply1]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply4]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply5]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data0]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data1]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data2]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data3]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data4]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data5]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data6]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data8]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data9]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data10]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data11]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data12]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data13]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data14]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data15]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply0]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply1]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply2]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply3]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply4]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply5]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply6]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply8]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply9]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply10]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply11]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply12]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply13]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply14]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply15]
= 278 failed, 1207 passed, 282 skipped, 2 deselected, 19 xfailed, 8 xpassed, 670 warnings in 755.96s (0:12:35) =
