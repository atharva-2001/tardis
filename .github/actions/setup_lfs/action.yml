name: "Setup LFS"
description: "Pull LFS repositories and caches them"


inputs:
  regression-data-repo:
    description: "tardis regression data repository"
    required: false
    default: "tardis-sn/tardis-regression-data"
  atom-data-sparse:
    description: "Only download atom data files"
    required: false
    default: 'false'

runs:
  using: "composite"
  steps:
    - name: Clone tardis-sn/tardis-regression-data
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.regression-data-repo }}
        path: tardis-regression-data
        sparse-checkout: ${{ inputs.atom-data-sparse == 'true' && 'atom_data/kurucz_cd23_chianti_H_He.h5' || '' }}

    - name: Create LFS file list
      run: |
        if [ "${{ inputs.atom-data-sparse }}" == "true" ]; then
          echo "Using atom data sparse checkout"
          echo "atom_data/kurucz_cd23_chianti_H_He.h5" > .lfs-files-list
        else
          echo "Using full repository checkout"
          git lfs ls-files -l | cut -d' ' -f1 | sort > .lfs-files-list
        fi
      working-directory: tardis-regression-data
      shell: bash

    - name: Initial LFS cache restore attempt
      uses: actions/cache/restore@v4
      id: lfs-cache-regression-data
      with:
        path: tardis-regression-data/.git/lfs
        key: tardis-regression-${{ inputs.atom-data-sparse == 'true' && 'atom-data-sparse' || 'full-data' }}-${{ hashFiles('tardis-regression-data/.lfs-files-list') }}-${{ inputs.regression-data-repo }}-v1

    - name: Download and cache LFS files if cache miss
      uses: ./.github/workflows/lfs-cache.yml
      if: steps.lfs-cache-regression-data.outputs.cache-hit != 'true'
      with:
        atom-data-sparse: ${{ inputs.atom-data-sparse }}
        regression-data-repo: ${{ inputs.regression-data-repo }}
        lfs-files-list: tardis-regression-data/.lfs-files-list
    
    - name: Restore newly created LFS cache
      uses: actions/cache/restore@v4
      id: lfs-cache-regression-data-final
      with:
        path: tardis-regression-data/.git/lfs
        key: tardis-regression-${{ inputs.atom-data-sparse == 'true' && 'atom-data-sparse' || 'full-data' }}-${{ hashFiles('tardis-regression-data/.lfs-files-list') }}-${{ inputs.regression-data-repo }}-v1

    - name: Git LFS Checkout
      run: git lfs checkout
      working-directory: tardis-regression-data
      if: steps.lfs-cache-regression-data.outputs.cache-hit == 'true'
      shell: bash
