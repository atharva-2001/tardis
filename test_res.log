============================= test session starts ==============================
platform linux -- Python 3.12.4, pytest-8.2.2, pluggy-1.5.0
rootdir: /home/aryaatharva18/tardis-main/tardis
configfile: pyproject.toml
plugins: doctestplus-1.2.1, anyio-4.4.0, cov-5.0.0, metadata-3.1.1, html-4.1.1
collected 1796 items / 2 deselected / 1794 selected

tardis/energy_input/tests/test_energy_source.py ..xxx                    [  0%]
tardis/energy_input/tests/test_gamma_ray_channel.py ...........          [  0%]
tardis/energy_input/tests/test_gamma_ray_grid.py xx.                     [  1%]
tardis/energy_input/tests/test_gamma_ray_interactions.py xx....          [  1%]
tardis/energy_input/tests/test_gamma_ray_packet_source.py sssssssss      [  1%]
tardis/energy_input/tests/test_util.py .....xxxx.....                    [  2%]
tardis/grid/tests/test_grid.py .                                         [  2%]
tardis/gui/tests/test_gui.py s                                           [  2%]
tardis/io/configuration/tests/test_config_reader.py ...........          [  3%]
tardis/io/configuration/tests/test_configuration_namespace.py .........  [  3%]
tardis/io/logger/tests/test_logging.py ssssssssssssssssssssssssssss      [  5%]
tardis/io/model/readers/tests/test_arepo_parser.py ..                    [  5%]
tardis/io/model/readers/tests/test_ascii_readers.py ...                  [  5%]
tardis/io/model/readers/tests/test_cmfgen_reader.py ..                   [  5%]
tardis/io/model/readers/tests/test_csvy_reader.py ....                   [  6%]
tardis/io/model/readers/tests/test_stella_reader.py ..                   [  6%]
tardis/io/tests/test_HDFWriter.py ...............                        [  7%]
tardis/io/tests/test_atomic.py .....                                     [  7%]
tardis/io/tests/test_decay.py ..                                         [  7%]
tardis/io/tests/test_model_reader.py ......                              [  7%]
tardis/model/geometry/tests/test_radial1d.py ..                          [  7%]
tardis/model/tests/test_base.py ........................................ [ 10%]
............                                                             [ 10%]
tardis/model/tests/test_csvy_model.py .........                          [ 11%]
tardis/model/tests/test_density.py ..                                    [ 11%]
tardis/opacities/tests/test_opacity_solver.py .....                      [ 11%]
tardis/opacities/tests/test_opacity_state_numba.py .....                 [ 11%]
tardis/opacities/tests/test_tau_sobolev.py FF                            [ 12%]
tardis/plasma/equilibrium/tests/test_collisional_transitions.py ...      [ 12%]
tardis/plasma/equilibrium/tests/test_level_populations.py ....           [ 12%]
tardis/plasma/equilibrium/tests/test_rate_matrix.py .                    [ 12%]
tardis/plasma/tests/test_complete_plasmas.py ...........FFF..FFF..s..... [ 13%]
sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FF [ 18%]
F..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss.... [ 22%]
........s...FFF..FFF.ss.....sFF.F....ss............s...FFF..FFF.ss.....s [ 26%]
FF.F....ss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF [ 30%]
..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sFssFssssss..... [ 34%]
.......s...FFF..FFF.ss.....sFF.Fssssss............s...FFF..FFF.ss.....sF [ 38%]
F.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF. [ 42%]
.FFF.ss.....sFF.Fssssss............s...FFF..FFF.s.....FFFF.Fssssss...... [ 46%]
......s...FFF..FFF.s.....FFFF.Fssssss............s...FFF..FFF.s.....FFFF [ 50%]
.Fssssss............s...FFF..FFF.ss.....sFF.Fssssss............s...FFF.. [ 54%]
FFF.ss.....sFF.Fssssss................FFF..FFF..s.....sFF.Fssss......... [ 58%]
.........FFF..FFF..s.....sFF.Fssss.......                                [ 60%]
tardis/plasma/tests/test_hdf_plasma.py ....F..F....F.F..........FFF..... [ 62%]
......                                                                   [ 62%]
tardis/plasma/tests/test_nlte_excitation.py ...                          [ 62%]
tardis/plasma/tests/test_nlte_solver.py .....X                           [ 63%]
tardis/plasma/tests/test_plasma_continuum.py .                           [ 63%]
tardis/plasma/tests/test_plasma_vboundary.py FFFFFFFFFFFFF               [ 63%]
tardis/plasma/tests/test_tardis_model_density_config.py ...              [ 64%]
tardis/simulation/tests/test_convergence.py .....                        [ 64%]
tardis/simulation/tests/test_simulation.py EEEEEEEEEEEEE                 [ 65%]
tardis/spectrum/tests/test_cuda_formal_integral.py ..................... [ 66%]
.............................                                            [ 67%]
tardis/spectrum/tests/test_luminosity.py ....                            [ 68%]
tardis/spectrum/tests/test_numba_formal_integral.py .................... [ 69%]
..........                                                               [ 69%]
tardis/spectrum/tests/test_spectrum.py ................................. [ 71%]
.........                                                                [ 72%]
tardis/spectrum/tests/test_spectrum_solver.py EEEE                       [ 72%]
tardis/tests/test_tardis_full.py FEEE                                    [ 72%]
tardis/tests/test_tardis_full_formal_integral.py EEEEEEEEEEEEEEEE        [ 73%]
tardis/tests/test_util.py .............................................  [ 75%]
tardis/transport/montecarlo/tests/test_base.py x.....................    [ 77%]
tardis/transport/montecarlo/tests/test_interaction.py .......            [ 77%]
tardis/transport/montecarlo/tests/test_macro_atom.py ....                [ 77%]
tardis/transport/montecarlo/tests/test_montecarlo.py sssssssssssssssssss [ 78%]
sssssssssssssssssssssssssssssssssssssssssssss                            [ 81%]
tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py xFF       [ 81%]
tardis/transport/montecarlo/tests/test_nonhomologous.py ...              [ 81%]
tardis/transport/montecarlo/tests/test_numba_interface.py .....x.        [ 82%]
tardis/transport/montecarlo/tests/test_opacities.py ...............      [ 82%]
tardis/transport/montecarlo/tests/test_packet.py .................xXXXXX [ 84%]
XX.........                                                              [ 84%]
tardis/transport/montecarlo/tests/test_packet_source.py ........         [ 85%]
tardis/transport/montecarlo/tests/test_rpacket_last_interaction_tracker.py . [ 85%]
.....                                                                    [ 85%]
tardis/transport/montecarlo/tests/test_rpacket_tracker.py ....F.         [ 85%]
tardis/transport/montecarlo/tests/test_single_packet_loop.py xxx         [ 86%]
tardis/transport/montecarlo/tests/test_tracker_utils.py ..               [ 86%]
tardis/transport/montecarlo/tests/test_vpacket.py ..x.                   [ 86%]
tardis/transport/montecarlo/tests/test_weighted_packet_source.py ....    [ 86%]
tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py F [ 86%]
                                                                         [ 86%]
tardis/transport/tests/test_doppler_factor.py ..................         [ 87%]
tardis/visualization/tools/tests/test_convergence_plot.py .............. [ 88%]
......                                                                   [ 88%]
tardis/visualization/tools/tests/test_liv_plot.py ...F..F..F..F..F..FF.F [ 90%]
..FF.FF..FF.F........FF..FF.F                                            [ 91%]
tardis/visualization/tools/tests/test_rpacket_plot.py .................. [ 92%]
....                                                                     [ 92%]
tardis/visualization/tools/tests/test_sdec_plot.py ...FFFFFFFFFFFFFFFFFF [ 94%]
FFFFFFFFFFFFFF................                                           [ 95%]
tardis/visualization/widgets/tests/test_custom_abundance.py ........ss.. [ 96%]
....                                                                     [ 96%]
tardis/visualization/widgets/tests/test_line_info.py ................... [ 97%]
..................                                                       [ 98%]
tardis/visualization/widgets/tests/test_shell_info.py .................. [ 99%]
......                                                                   [100%]

==================================== ERRORS ====================================
_________ ERROR at setup of test_plasma_state_iterations[iterations_w] _________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______ ERROR at setup of test_plasma_state_iterations[iterations_t_rad] _______

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of test_plasma_state_iterations[iterations_electron_densities] _

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
______ ERROR at setup of test_plasma_state_iterations[iterations_t_inner] ______

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
__________ ERROR at setup of test_plasma_estimates[nu_bar_estimator] ___________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_____________ ERROR at setup of test_plasma_estimates[j_estimator] _____________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_____________ ERROR at setup of test_plasma_estimates[t_radiative] _____________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
___________ ERROR at setup of test_plasma_estimates[dilution_factor] ___________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_____________ ERROR at setup of test_plasma_estimates[output_nus] ______________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
___________ ERROR at setup of test_plasma_estimates[output_energies] ___________

config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="module")
    def simulation_one_loop(config, atomic_data_fname):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
        config.montecarlo.no_of_packets = int(4e4)
        config.montecarlo.last_no_of_packets = int(4e4)
    
>       sim = Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:25: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________ ERROR at setup of test_plasma_state_storer_store _______________

atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}

    @pytest.fixture(scope="module")
    def simulation_without_loop(atomic_data_fname, config):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
>       return Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
______________ ERROR at setup of test_plasma_state_storer_reshape ______________

atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}

    @pytest.fixture(scope="module")
    def simulation_without_loop(atomic_data_fname, config):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
>       return Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
______________________ ERROR at setup of test_version_tag ______________________

atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}

    @pytest.fixture(scope="module")
    def simulation_without_loop(atomic_data_fname, config):
        config.atom_data = atomic_data_fname
        config.montecarlo.iterations = 2
>       return Simulation.from_config(config)

tardis/simulation/tests/test_simulation.py:87: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
___________ ERROR at setup of TestSpectrumSolver.test_initialization ___________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f7ebe50f830>
request = <SubRequest 'simulation' for <Function test_initialization>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/spectrum/tests/test_spectrum_solver.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______ ERROR at setup of TestSpectrumSolver.test_spectrum_real_packets ________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f7ebe50f830>
request = <SubRequest 'simulation' for <Function test_initialization>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/spectrum/tests/test_spectrum_solver.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
__ ERROR at setup of TestSpectrumSolver.test_spectrum_real_packets_reabsorbed __

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f7ebe50f830>
request = <SubRequest 'simulation' for <Function test_initialization>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/spectrum/tests/test_spectrum_solver.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________ ERROR at setup of TestSpectrumSolver.test_solve ________________

self = <tardis.spectrum.tests.test_spectrum_solver.TestSpectrumSolver object at 0x7f7ebe50f830>
request = <SubRequest 'simulation' for <Function test_initialization>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/spectrum/tests/test_spectrum_solver.py:31: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_________ ERROR at setup of TestTransportSimple.test_j_blue_estimators _________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f7ebe53ba40>
request = <SubRequest 'simulation' for <Function test_j_blue_estimators>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
_____________ ERROR at setup of TestTransportSimple.test_spectrum ______________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f7ebe53ba40>
request = <SubRequest 'simulation' for <Function test_j_blue_estimators>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_________ ERROR at setup of TestTransportSimple.test_virtual_spectrum __________

self = <tardis.tests.test_tardis_full.TestTransportSimple object at 0x7f7ebe53ba40>
request = <SubRequest 'simulation' for <Function test_j_blue_estimators>>
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
generate_reference = False
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    @pytest.fixture(scope="class")
    def simulation(
        self,
        request,
        atomic_data_fname,
        generate_reference,
        example_configuration_dir: Path,
    ):
        config = Configuration.from_yaml(
            str(example_configuration_dir / "tardis_configv1_verysimple.yml")
        )
        config["atom_data"] = atomic_data_fname
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_simulation[-1-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
---------------------------- Captured stdout setup -----------------------------
config {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Quantity 13. d>, 'luminosity_wavelength_start': <Quantity 0. Angstrom>, 'luminosity_wavelength_end': <Quantity inf Angstrom>}, 'atom_data': 'kurucz_cd23_chianti_H_He.h5', 'model': {'structure': {'type': 'specific', 'velocity': {'start': <Quantity 11000. km / s>, 'stop': <Quantity 20000. km / s>, 'num': 20}, 'density': {'type': 'branch85_w7', 'w7_time_0': <Quantity 0.00023148 d>, 'w7_rho_0': <Quantity 3.e+29 g / cm3>, 'w7_v_0': <Quantity 1. km / s>}}, 'abundances': {'type': 'uniform', 'O': 0.19, 'Mg': 0.03, 'Si': 0.52, 'S': 0.19, 'Ar': 0.04, 'Ca': 0.03, 'model_isotope_time_0': <Quantity 0. s>}}, 'plasma': {'ionization': 'lte', 'excitation': 'lte', 'radiative_rates_type': 'dilute-blackbody', 'line_interaction_type': 'downbranch', 'initial_t_inner': <Quantity -1. K>, 'initial_t_rad': <Quantity -1. K>, 'disable_electron_scattering': False, 'disable_line_scattering': False, 'w_epsilon': 1e-10, 'nlte': {'species': [], 'coronal_approximation': False, 'classical_nebular': False}, 'continuum_interaction': {'species': [], 'enable_adiabatic_cooling': False, 'enable_two_photon_decay': False}, 'helium_treatment': 'none', 'heating_rate_data_file': 'none', 'link_t_rad_t_electron': 0.9, 'nlte_ionization_species': [], 'nlte_excitation_species': [], 'nlte_solver': 'root'}, 'montecarlo': {'seed': 23111963, 'no_of_packets': 40000.0, 'iterations': 5, 'last_no_of_packets': 100000.0, 'no_of_virtual_packets': 0, 'convergence_strategy': {'type': 'damped', 'damping_constant': 0.5, 'threshold': 0.05, 'lock_t_inner_cycles': 1, 't_inner_update_exponent': -0.5, 'stop_if_converged': False, 'fraction': 0.8, 'hold_iterations': 3, 't_inner': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 't_rad': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 'w': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}}, 'nthreads': 1, 'virtual_spectrum_spawn_range': {'start': <Quantity 1. Angstrom>, 'end': <Quantity inf Angstrom>}, 'enable_full_relativity': False, 'enable_nonhomologous_expansion': False, 'tracking': {'track_rpacket': False, 'initial_array_length': 10}, 'debug_packets': False, 'logger_buffer': 1}, 'spectrum': {'start': <Quantity 500. Angstrom>, 'stop': <Quantity 20000. Angstrom>, 'num': 10000, 'virtual': {'virtual_packet_logging': True, 'tau_russian': 10.0, 'survival_probability': 0.0, 'enable_biasing': False}, 'method': 'integrated', 'integrated': {'points': 200, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum[-1-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_simulation[-1-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
---------------------------- Captured stdout setup -----------------------------
config {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Quantity 13. d>, 'luminosity_wavelength_start': <Quantity 0. Angstrom>, 'luminosity_wavelength_end': <Quantity inf Angstrom>}, 'atom_data': 'kurucz_cd23_chianti_H_He.h5', 'model': {'structure': {'type': 'specific', 'velocity': {'start': <Quantity 11000. km / s>, 'stop': <Quantity 20000. km / s>, 'num': 20}, 'density': {'type': 'branch85_w7', 'w7_time_0': <Quantity 0.00023148 d>, 'w7_rho_0': <Quantity 3.e+29 g / cm3>, 'w7_v_0': <Quantity 1. km / s>}}, 'abundances': {'type': 'uniform', 'O': 0.19, 'Mg': 0.03, 'Si': 0.52, 'S': 0.19, 'Ar': 0.04, 'Ca': 0.03, 'model_isotope_time_0': <Quantity 0. s>}}, 'plasma': {'ionization': 'lte', 'excitation': 'lte', 'radiative_rates_type': 'dilute-blackbody', 'line_interaction_type': 'macroatom', 'initial_t_inner': <Quantity -1. K>, 'initial_t_rad': <Quantity -1. K>, 'disable_electron_scattering': False, 'disable_line_scattering': False, 'w_epsilon': 1e-10, 'nlte': {'species': [], 'coronal_approximation': False, 'classical_nebular': False}, 'continuum_interaction': {'species': [], 'enable_adiabatic_cooling': False, 'enable_two_photon_decay': False}, 'helium_treatment': 'none', 'heating_rate_data_file': 'none', 'link_t_rad_t_electron': 0.9, 'nlte_ionization_species': [], 'nlte_excitation_species': [], 'nlte_solver': 'root'}, 'montecarlo': {'seed': 23111963, 'no_of_packets': 40000.0, 'iterations': 5, 'last_no_of_packets': 100000.0, 'no_of_virtual_packets': 0, 'convergence_strategy': {'type': 'damped', 'damping_constant': 0.5, 'threshold': 0.05, 'lock_t_inner_cycles': 1, 't_inner_update_exponent': -0.5, 'stop_if_converged': False, 'fraction': 0.8, 'hold_iterations': 3, 't_inner': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 't_rad': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 'w': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}}, 'nthreads': 1, 'virtual_spectrum_spawn_range': {'start': <Quantity 1. Angstrom>, 'end': <Quantity inf Angstrom>}, 'enable_full_relativity': False, 'enable_nonhomologous_expansion': False, 'tracking': {'track_rpacket': False, 'initial_array_length': 10}, 'debug_packets': False, 'logger_buffer': 1}, 'spectrum': {'start': <Quantity 500. Angstrom>, 'stop': <Quantity 20000. Angstrom>, 'num': 10000, 'virtual': {'virtual_packet_logging': True, 'tau_russian': 10.0, 'survival_probability': 0.0, 'enable_biasing': False}, 'method': 'integrated', 'integrated': {'points': 200, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_j_blue_estimators[-1-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum[-1-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum_integrated[-1-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': -1, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_simulation[30-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum[30-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-macroatom] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_simulation[30-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
---------------------------- Captured stdout setup -----------------------------
config {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Quantity 13. d>, 'luminosity_wavelength_start': <Quantity 0. Angstrom>, 'luminosity_wavelength_end': <Quantity inf Angstrom>}, 'atom_data': 'kurucz_cd23_chianti_H_He.h5', 'model': {'structure': {'type': 'specific', 'velocity': {'start': <Quantity 11000. km / s>, 'stop': <Quantity 20000. km / s>, 'num': 20}, 'density': {'type': 'branch85_w7', 'w7_time_0': <Quantity 0.00023148 d>, 'w7_rho_0': <Quantity 3.e+29 g / cm3>, 'w7_v_0': <Quantity 1. km / s>}}, 'abundances': {'type': 'uniform', 'O': 0.19, 'Mg': 0.03, 'Si': 0.52, 'S': 0.19, 'Ar': 0.04, 'Ca': 0.03, 'model_isotope_time_0': <Quantity 0. s>}}, 'plasma': {'ionization': 'lte', 'excitation': 'lte', 'radiative_rates_type': 'dilute-blackbody', 'line_interaction_type': 'downbranch', 'initial_t_inner': <Quantity -1. K>, 'initial_t_rad': <Quantity -1. K>, 'disable_electron_scattering': False, 'disable_line_scattering': False, 'w_epsilon': 1e-10, 'nlte': {'species': [], 'coronal_approximation': False, 'classical_nebular': False}, 'continuum_interaction': {'species': [], 'enable_adiabatic_cooling': False, 'enable_two_photon_decay': False}, 'helium_treatment': 'none', 'heating_rate_data_file': 'none', 'link_t_rad_t_electron': 0.9, 'nlte_ionization_species': [], 'nlte_excitation_species': [], 'nlte_solver': 'root'}, 'montecarlo': {'seed': 23111963, 'no_of_packets': 40000.0, 'iterations': 5, 'last_no_of_packets': 100000.0, 'no_of_virtual_packets': 0, 'convergence_strategy': {'type': 'damped', 'damping_constant': 0.5, 'threshold': 0.05, 'lock_t_inner_cycles': 1, 't_inner_update_exponent': -0.5, 'stop_if_converged': False, 'fraction': 0.8, 'hold_iterations': 3, 't_inner': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 't_rad': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}, 'w': {'damping_constant': 0.5, 'threshold': 0.05, 'type': 'damped'}}, 'nthreads': 1, 'virtual_spectrum_spawn_range': {'start': <Quantity 1. Angstrom>, 'end': <Quantity inf Angstrom>}, 'enable_full_relativity': False, 'enable_nonhomologous_expansion': False, 'tracking': {'track_rpacket': False, 'initial_array_length': 10}, 'debug_packets': False, 'logger_buffer': 1}, 'spectrum': {'start': <Quantity 500. Angstrom>, 'stop': <Quantity 20000. Angstrom>, 'num': 10000, 'virtual': {'virtual_packet_logging': True, 'tau_russian': 10.0, 'survival_probability': 0.0, 'enable_biasing': False}, 'method': 'integrated', 'integrated': {'points': 200, 'interpolate_shells': 0, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log setup ------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_j_blue_estimators[30-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum[30-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_ ERROR at setup of TestTransportSimpleFormalIntegral.test_spectrum_integrated[30-downbranch] _

self = <tardis.tests.test_tardis_full_formal_integral.TestTransportSimpleFormalIntegral object at 0x7f7ebe53bda0>
config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...: {'points': 200, 'interpolate_shells': 30, 'compute': 'CPU'}}, 'config_dirname': 'tardis/io/configuration/tests/data'}
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.fixture(scope="class")
    def simulation(self, config, atomic_data_fname):
        config.atom_data = atomic_data_fname
    
        self.name = self._name + f"_{config.plasma.line_interaction_type:s}"
        if config.spectrum.integrated.interpolate_shells > 0:
            self.name += "_interp"
    
>       simulation = Simulation.from_config(config)

tardis/tests/test_tardis_full_formal_integral.py:62: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
=================================== FAILURES ===================================
_____________________ test_calculate_sobolev_line_opacity ______________________

left = array([13, 13, 13, ..., 19, 19, 19], dtype=int8)
right = array([13, 13, 13, ..., 19, 19, 19], dtype=int8), err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (0.08897 %)
E           [left]:  [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]
E           [right]: [13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 11, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 13, 11, 11, 19, 11, 11, 11, 11, 13, 13, 11, 11, 13, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 13, 13, 13, 13, 11, 11, 13, 11, 13, 13, 19, 11, 11, 11, 11, 13, 19, 11, 11, 11, 19, 19, 19, 19, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 13, 13, 11, 13, 11, 11, 11, 11, 11, 13, 13, 13, 13, 11, 11, 11, 13, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e95f78440>
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7eb49e7410>

    def test_calculate_sobolev_line_opacity(
        nb_simulation_verysimple, regression_data
    ):
        legacy_plasma = nb_simulation_verysimple.plasma
    
        actual = calculate_sobolev_line_opacity(
            legacy_plasma.lines,
            legacy_plasma.level_number_density,
            legacy_plasma.time_explosion,
            legacy_plasma.stimulated_emission_factor,
        )
        expected = regression_data.sync_dataframe(actual)
>       pdt.assert_frame_equal(actual, expected)

tardis/opacities/tests/test_tau_sobolev.py:22: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [0] are different
E   
E   MultiIndex level [0] values are different (0.08897 %)
E   [left]:  Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
E          ...
E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
E         dtype='int64', name='atomic_number', length=29224)
E   [right]: Index([14, 14, 14, 14, 14, 14, 14, 14, 14, 14,
E          ...
E          20, 20, 20, 20, 20, 20, 20, 20, 20, 20],
E         dtype='int64', name='atomic_number', length=29224)
E   At positional index 480, first diff: 8 != 20

testing.pyx:173: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
---------------------------- Captured stderr setup -----------------------------

Packets:                                                                                   4021/? [00:17<00:00, 166.75it/s]  [AIterations:████████████████████████████████████████████████████████████████                4/5 [00:17<00:05,  5.31s/it]
Packets:                                                                                   4030/? [00:17<00:00, 166.75it/s][A
------------------------------ Captured log setup ------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
_________________________ test_calculate_beta_sobolevs _________________________

nb_simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e95f78440>
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7eb49e74a0>

    def test_calculate_beta_sobolevs(nb_simulation_verysimple, regression_data):
        legacy_plasma = nb_simulation_verysimple.plasma
    
        tau_sobolevs = calculate_sobolev_line_opacity(
            legacy_plasma.lines,
            legacy_plasma.level_number_density,
            legacy_plasma.time_explosion,
            legacy_plasma.stimulated_emission_factor,
        )
        actual = calculate_beta_sobolev(tau_sobolevs)
        expected = regression_data.sync_ndarray(actual)
>       npt.assert_allclose(actual, expected)

tardis/opacities/tests/test_tau_sobolev.py:36: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e6ef84180>, array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., .....,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13593 / 584480 (2.33%)
E           Max absolute difference among violations: 0.99984222
E           Max relative difference among violations: 6337.12154973
E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...
E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_________ TestPlasma.test_plasma_properties[ionization:nebular-lines] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe8000b0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[ionization:nebular-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7b60>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[ionization:nebular-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5df0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
___________ TestPlasma.test_plasma_properties[ionization:nebular-nu] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7cb0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[ionization:nebular-wavelength_cm] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e78f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[ionization:nebular-f_lu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7380>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[ionization:nebular-tau_sobolevs] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7c20>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[ionization:nebular-beta_sobolev] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e79b0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:nebular-j_blues] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7d40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95d4a600>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___________ TestPlasma.test_plasma_properties[ionization:lte-lines] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e61e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[ionization:lte-lines_lower_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e4470>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
__ TestPlasma.test_plasma_properties[ionization:lte-lines_upper_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5e50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____________ TestPlasma.test_plasma_properties[ionization:lte-nu] _____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5f70>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[ionization:lte-wavelength_cm] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5fd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____________ TestPlasma.test_plasma_properties[ionization:lte-f_lu] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e55e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:lte-tau_sobolevs] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5b20>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[ionization:lte-beta_sobolev] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5670>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[ionization:lte-j_blues] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e53a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7eb45f5250>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___________ TestPlasma.test_plasma_properties[excitation:lte-lines] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e5bb0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[excitation:lte-lines_lower_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e4da0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
__ TestPlasma.test_plasma_properties[excitation:lte-lines_upper_level_index] ___

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e4ec0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____________ TestPlasma.test_plasma_properties[excitation:lte-nu] _____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7e7e00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[excitation:lte-wavelength_cm] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cbe00>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____________ TestPlasma.test_plasma_properties[excitation:lte-f_lu] ____________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cbfb0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:lte-tau_sobolevs] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cab10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:lte-beta_sobolev] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cb530>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__________ TestPlasma.test_plasma_properties[excitation:lte-j_blues] ___________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cb860>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f78890>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7ca330>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7ca900>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[excitation:dilute-lte-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c8440>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_________ TestPlasma.test_plasma_properties[excitation:dilute-lte-nu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cafc0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-wavelength_cm] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cae40>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[excitation:dilute-lte-f_lu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cade0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-tau_sobolevs] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c8410>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[excitation:dilute-lte-beta_sobolev] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c94f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[excitation:dilute-lte-j_blues] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c9730>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71b9cb60>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7cac30>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7caa80>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7ca420>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c89e0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c83b0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7c8650>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b23f0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b29c0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b31a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e8a0050d0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b3e90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b3200>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b3080>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b3830>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b25a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b2180>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b34a0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7b2de0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[radiative_rates_type:detailed-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe8765d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e85d79520>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe8771d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877290>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877350>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-nu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877590>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877650>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-f_lu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877710>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877e90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe877f50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[radiative_rates_type:blackbody-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe740110>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c188f80>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe740e90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe740f50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741010>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-nu] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741250>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741310>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7413d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741b50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741c10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe741d90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9205ce00>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe742b10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe742bd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe742c90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe742ed0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe742f90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:scatter-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe743050>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:scatter-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe7437d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:scatter-j_blues] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe743a10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd55e6e70>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75c7d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75c890>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75c950>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-nu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75cb90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75cc50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-f_lu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75cd10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75d490>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75d550>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[line_interaction_type:macroatom-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75d6d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e6d2e16a0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e450>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e510>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e5d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e810>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e8d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75e990>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75f110>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75f1d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[line_interaction_type:downbranch-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe75f350>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71919a30>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c110>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c1d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c290>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
____ TestPlasma.test_plasma_properties[disable_electron_scattering:True-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c4d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c590>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[disable_electron_scattering:True-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78c650>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78cdd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78ce90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:True-j_blues] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78d010>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7152cd10>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78dd90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78de50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78df10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
___ TestPlasma.test_plasma_properties[disable_electron_scattering:False-nu] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78e150>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78e210>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[disable_electron_scattering:False-f_lu] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78e2d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78ea50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78eb10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[disable_electron_scattering:False-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78ec90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e75a9fbf0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78fa10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78fad0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78fb90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78fdd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78fe90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe78ff50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b4590>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (1.61943 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995981197664222, 0.9995995247961845, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812817, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235593, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9999999999978895, 0.9999999999978842, 0.9999999999978614, 0.999999999991747, 0.9999999999917402, 0.9999999999917224, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9999999999997459, 0.9999999999668421, 0.9999999999668189, 0.9999999999666556, 0.9999999999997972, 0.999599343867006, 0.9995995247961845, 0.9995981197664222, 0.9993088316650953, 0.9993091437844136, 0.9979241854543773, 0.9914207638642889, 0.9852000359750833, 0.9555506538044028, 0.7424017134464478, 0.0, 0.9994315890431902, 0.9994270684185246, 0.999389211869484, 0.9990194393091552, 0.9989463348233469, 0.9970550413811967, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9952260126497807, 0.9917644368425119, 0.9752657913703978, 0.49698607605812795, 0.9999999999989754, 0.0, 0.9987812048558925, 0.998906855427952, 0.9987925708884063, 0.9978974673267881, 0.9981142260121504, 0.9936853763616037, 0.0, 0.8383155552750279, 0.7210796010896983, 0.16230678998235604, ...]
E   At positional index 124, first diff: 0.9928779361771577 != 0.9929028359129612

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b4650>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b4710>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b47d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b4950>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e7188a6c0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b56d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b5790>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b5850>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b5a90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b5b50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b5c10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b6210>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (2.42915 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b62d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b6390>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b6450>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b65d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9c15e1b0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7350>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7410>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b74d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-nu] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7710>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b77d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-f_lu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7890>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7e90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'stimulated_emission_factor'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: DataFrame.iloc[:, 0] (column name="0") are different
E   
E   DataFrame.iloc[:, 0] (column name="0") values are different (2.42915 %)
E   [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E   [left]:  [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988842577117688, 0.988854404408907, 0.9888439969744192, 0.9888303696817571, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279035289663, 0.9540279234367635, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737091, 0.9718136298684907, 0.9672065440240926, 0.9636425351097364, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.9332637042384961, ...]
E   [right]: [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9999999999997263, 0.9999999999996098, 0.9999999999991557, 0.999999999992512, 0.9999983338674766, 0.9999983337847421, 0.9999983337551588, 0.9999983336649623, 0.9999983324883531, 0.9999983324582653, 0.9999983323754609, 0.9999930693019476, 0.9999930688347333, 0.9999930686296292, 0.9999930681023338, 0.9999930636842842, 0.9999930634399783, 0.9999930627670911, 0.9998492464454313, 0.9998492363263092, 0.9998492117764549, 0.9998491985422514, 0.9998491315262693, 0.9998491189384007, 0.9998490842401014, 0.9978173594554944, 0.9978184182059014, 0.9978147545318927, 0.9966566695952355, 0.9966568290980872, 0.9966584936543016, 0.9889507362418339, 0.9889505145446142, 0.9889501875729707, 0.9889499164184155, 0.9889481665140082, 0.9889479670998393, 0.9889479734811484, 0.9889474182934699, 0.9889473752173978, 0.9889470513437773, 0.9908636941799814, 0.9910733310867013, 0.9910707479354033, 0.99106827366808, 0.9869706197340086, 0.9888680023784624, 0.988854404408907, 0.988842577117688, 0.9888439969744192, 0.9888303696817572, 0.9888167635191049, 0.9873476955698869, 0.987320411726479, 0.9872894589739691, 0.9821262955834781, 0.9791232244226186, 0.9838502240610797, 0.983809063007667, 0.9838288171331826, 0.983815398155631, 0.9837939450651338, 0.9837758891459887, 0.9540378032764323, 0.9540368810709838, 0.9540333446728257, 0.9540320242592908, 0.9540279234367635, 0.9540279035289663, 0.9540263108772171, 0.954026284332555, 0.9540248973525776, 0.9540240877085595, 0.9540224750144676, 0.9540218246115432, 0.9540214529485972, 0.9784972121335433, 0.9784508428179596, 0.9783982381343796, 0.9758601305737092, 0.9718136298684907, 0.9672065440240926, 0.9636425351097363, 0.963579613478006, 0.9635221713362545, 0.9635641326823955, 0.963501075364399, 0.9634751873350202, 0.9500536378743768, 0.9335694736531381, 0.9334262206917217, 0.933263704238496, ...]
E   At positional index 55, first diff: 0.988842577117688 != 0.988854404408907

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5b7f50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'previous_beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dc050>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
__ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev] __

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dc110>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[nlte:{'species': ['He I']}-j_blues] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dc290>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71ba6e70>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd010>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd0d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd190>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-nu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd3d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-wavelength_cm] ___

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd490>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-f_lu] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dd550>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5ddcd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-beta_sobolev] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5ddd90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
______ TestPlasma.test_plasma_properties[initial_t_inner:10000 K-j_blues] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5ddf10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e95f4b7d0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines] ________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dec90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5ded50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dee10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-nu] __________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5df050>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-wavelength_cm] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5df110>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
________ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-f_lu] _________

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5df1d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5df950>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-beta_sobolev] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dfa10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_______ TestPlasma.test_plasma_properties[initial_t_rad:10000 K-j_blues] _______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe5dfb90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e9f7b8140>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60c950>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60ca10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60cad0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
______ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-nu] ______

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60cd10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60cdd0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_____ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-f_lu] _____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60ce90>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60d610>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60d6d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
___ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-j_blues] ____

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60d850>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7e71a016a0>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60e5d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'lines'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60e690>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'lines_lower_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
right = array([49, 49, 49, 49, 49, 49, 49, 49,  0,  0,  0,  0, 50, 50, 51, 51, 52,
       52, 52, 50, 51, 50, 51, 52, 52, 52, ...
       21,  8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (2.42915 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 56, 55, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [49, 49, 49, 49, 49, 49, 49, 49, 0, 0, 0, 0, 50, 50, 51, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 50, 51, 50, 51, 52, 52, 52, 1, 1, 1, 1, 1, 1, 53, 54, 53, 54, 56, 56, 55, 56, 55, 57, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 53, 54, 53, 54, 55, 56, 55, 56, 57, 57, 57, 56, 55, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index] _

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60e750>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'lines_upper_level_index'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

left = array([65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
right = array([68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16,  6, 67, 66, 68, 65, 69,
       67, 66, 60, 61, 59, 58, 62, 60, 59, ...
       31, 16, 21, 20, 19, 30, 14, 14, 13, 12, 13, 14, 24, 24, 23, 22, 23,
       24, 16, 30, 28, 27, 26, 26, 28, 29])
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: Series are different
E           
E           Series values are different (6.47773 %)
E           [index]: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]
E           [left]:  [65, 68, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 37, 36, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 62, 63, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]
E           [right]: [68, 65, 58, 61, 56, 53, 52, 50, 48, 30, 16, 6, 67, 66, 68, 65, 69, 67, 66, 60, 61, 59, 58, 62, 60, 59, 55, 56, 54, 53, 57, 55, 54, 35, 34, 33, 21, 20, 19, 67, 68, 66, 65, 69, 67, 68, 66, 65, 68, 48, 11, 10, 9, 30, 38, 36, 37, 38, 36, 38, 31, 31, 31, 39, 32, 24, 22, 23, 24, 23, 24, 60, 61, 59, 58, 63, 62, 61, 60, 64, 63, 61, 59, 58, 17, 17, 17, 25, 16, 18, 14, 13, 12, 14, 13, 14, 15, 7, 7, 7, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60e990>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>, attr = 'nu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60ea50>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'wavelength_cm'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60eb10>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>, attr = 'f_lu'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
>               pdt.assert_series_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:192: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60f290>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'tau_sobolevs'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60f350>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'beta_sobolev'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_ TestPlasma.test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues] _

left = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
right = array([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  1,  2,  2,  3,
        3,  3,  1,  2,  1,  2,  3,  3,  3, ... 8, 17, 17, 17, 18,  9, 10,  9,  9, 10, 11, 19, 20, 19, 19, 20,
       21, 15, 25, 23, 22, 22, 23, 24, 25], dtype=int8)
err_msg = None

    def _raise(left, right, err_msg) -> NoReturn:
        if err_msg is None:
            if left.shape != right.shape:
                raise_assert_detail(
                    obj, f"{obj} shapes are different", left.shape, right.shape
                )
    
            diff = 0
            for left_arr, right_arr in zip(left, right):
                # count up differences
                if not array_equivalent(left_arr, right_arr, strict_nan=strict_nan):
                    diff += 1
    
            diff = diff * 100.0 / left.size
            msg = f"{obj} values are different ({np.round(diff, 5)} %)"
>           raise_assert_detail(obj, msg, left, right, index_values=index_values)
E           AssertionError: numpy array are different
E           
E           numpy array values are different (2.42915 %)
E           [left]:  [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 7, 6, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]
E           [right]: [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 2, 1, 2, 3, 3, 3, 1, 1, 1, 1, 1, 1, 4, 5, 4, 5, 7, 7, 6, 7, 6, 8, 2, 1, 1, 1, 2, 3, 3, 3, 4, 4, 5, 3, 4, 5, 6, 6, 3, 3, 3, 4, 4, 5, 4, 5, 4, 5, 6, 7, 6, 7, 8, 8, 8, 7, 6, 3, 4, 5, 6, 2, 6, 3, 3, 3, 4, 4, 5, 6, 3, 4, 5, ...]

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/_testing/asserters.py:684: AssertionError

During handling of the above exception, another exception occurred:

self = <tardis.plasma.tests.test_complete_plasmas.TestPlasma object at 0x7f7ebe60f4d0>
plasma = <tardis.plasma.base.BasePlasma object at 0x7f7dd5844620>
attr = 'j_blues'

    @pytest.mark.parametrize("attr", combined_properties)
    def test_plasma_properties(self, plasma, attr):
        key = f"plasma/{attr}"
        try:
            expected = pd.read_hdf(self.regression_data.fpath, key)
        except KeyError:
            pytest.skip(f"Key {key} not found in regression data")
    
        if hasattr(plasma, attr):
            actual = getattr(plasma, attr)
            if attr == "selected_atoms":
                npt.assert_allclose(actual.values, expected.values)
            elif actual.ndim == 1:
                actual = pd.Series(actual)
                pdt.assert_series_equal(actual, expected)
            else:
                actual = pd.DataFrame(actual)
>               pdt.assert_frame_equal(actual, expected)

tardis/plasma/tests/test_complete_plasmas.py:195: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
testing.pyx:55: in pandas._libs.testing.assert_almost_equal
    ???
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

>   ???
E   AssertionError: MultiIndex level [2] are different
E   
E   MultiIndex level [2] values are different (2.42915 %)
E   [left]:  Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   [right]: Index([ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,
E          ...
E          20, 21, 15, 25, 23, 22, 22, 23, 24, 25],
E         dtype='int64', name='level_number_lower', length=247)
E   At positional index 75, first diff: 7 != 6

testing.pyx:173: AssertionError
_________________ test_hdf_plasma[stimulated_emission_factor] __________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'stimulated_emission_factor'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7dd5845640>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e6f4498a0>, array([[0.        , 0.        , 0.        , ..., 0.   ...1,
        0.01476858],
       [0.01433244, 0.01435378, 0.01437513, ..., 0.0146952 , 0.01471653,
        0.01473787]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 80 / 584480 (0.0137%)
E           Max absolute difference among violations: 1.
E           Max relative difference among violations: 1.
E            ACTUAL: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...
E            DESIRED: array([[0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],
E                  [0.      , 0.      , 0.      , ..., 0.      , 0.      , 0.      ],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___________________ test_hdf_plasma[lines_lower_level_index] ___________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'lines_lower_level_index'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e6bfd0f80>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e6f448720>, array([2577, 2577, 2577, ..., 3886, 3846, 3885]), array([2577, 2577, 2577, ..., 3886, 3846, 3885]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 775 / 29224 (2.65%)
E           Max absolute difference among violations: 4005
E           Max relative difference among violations: 415.5
E            ACTUAL: array([2577, 2577, 2577, ..., 3886, 3846, 3885])
E            DESIRED: array([2577, 2577, 2577, ..., 3886, 3846, 3885])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
___________________ test_hdf_plasma[lines_upper_level_index] ___________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'lines_upper_level_index'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e75b2b7d0>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e6f44a660>, array([2613, 2612, 2611, ..., 3899, 3852, 3898]), array([2613, 2612, 2611, ..., 3899, 3852, 3898]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 1843 / 29224 (6.31%)
E           Max absolute difference among violations: 4046
E           Max relative difference among violations: 54.65079365
E            ACTUAL: array([2613, 2612, 2611, ..., 3899, 3852, 3898])
E            DESIRED: array([2613, 2612, 2611, ..., 3899, 3852, 3898])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________________________ test_hdf_plasma[beta_sobolev] _________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'beta_sobolev'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7ebe666f30>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e9ef45f80>, array([[1., 1., 1., ..., 1., 1., 1.],
       [1., 1., .....,
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.],
       [1., 1., 1., ..., 1., 1., 1.]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13593 / 584480 (2.33%)
E           Max absolute difference among violations: 0.99984222
E           Max relative difference among violations: 6337.12154973
E            ACTUAL: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...
E            DESIRED: array([[1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],
E                  [1., 1., 1., ..., 1., 1., 1.],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____________________________ test_hdf_plasma[lines] ____________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'lines'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e6bfd1d90>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e85c93ec0>, array([[6.78130000e+04, 6.67720000e+01, 2.70301683e-02...       [1.04462000e+05, 9.99900019e+05, 2.64868307e-04, ...,
        4.44653904e+09, 1.76709163e+00, 9.99900019e-03]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 13481 / 263016 (5.13%)
E           Max absolute difference among violations: 2.93004431e+13
E           Max relative difference among violations: 6160.70416047
E            ACTUAL: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
E                   4.043917e+10, 6.677200e-07],
E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...
E            DESIRED: array([[6.781300e+04, 6.677200e+01, 2.703017e-02, ..., 3.030251e+07,
E                   4.043917e+10, 6.677200e-07],
E                  [6.781400e+04, 6.920400e+01, 8.668421e-02, ..., 1.007179e+08,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
____________________________ test_hdf_plasma[f_lu] _____________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'f_lu'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e6bfd0c20>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e85c91760>, array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02,...), array([4.05452524e-02, 8.66842126e-02, 9.28838073e-02, ...,
       9.93184643e-04, 1.12688279e+00, 4.41447178e-04]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 2241 / 29224 (7.67%)
E           Max absolute difference among violations: 2.92713618
E           Max relative difference among violations: 6160.70416047
E            ACTUAL: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
E                  1.126883e+00, 4.414472e-04])
E            DESIRED: array([4.054525e-02, 8.668421e-02, 9.288381e-02, ..., 9.931846e-04,
E                  1.126883e+00, 4.414472e-04])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
________________________ test_hdf_plasma[tau_sobolevs] _________________________

simulation_verysimple = <tardis.simulation.base.Simulation object at 0x7f7e9f1918b0>
attr = 'tau_sobolevs'
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e75ada750>

    @pytest.mark.parametrize("attr", plasma_properties_list)
    def test_hdf_plasma(simulation_verysimple, attr, regression_data):
        if hasattr(simulation_verysimple.plasma, attr):
            actual = getattr(simulation_verysimple.plasma, attr)
            expected = regression_data.sync_ndarray(actual)
            if hasattr(actual, "cgs"):
                actual = actual.cgs.value
>           npt.assert_allclose(actual, expected)

tardis/plasma/tests/test_hdf_plasma.py:53: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e85c92de0>, array([[0.00000000e+00, 0.00000000e+00, 0.00000000e+00...       [7.57366002e-14, 3.42661945e-14, 1.59795775e-14, ...,
        2.25618458e-18, 1.41426559e-18, 8.96636158e-19]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 40040 / 584480 (6.85%)
E           Max absolute difference among violations: 604603.16180317
E           Max relative difference among violations: 4.12352828e+47
E            ACTUAL: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
E                   0.000000e+00, 0.000000e+00],
E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...
E            DESIRED: array([[0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,
E                   0.000000e+00, 0.000000e+00],
E                  [0.000000e+00, 0.000000e+00, 0.000000e+00, ..., 0.000000e+00,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_______________________ test_plasma_vboundary[3350-3650] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3350, v_outer_boundary = 3650
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2900-3750] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2900, v_outer_boundary = 3750
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2900-3850] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2900, v_outer_boundary = 3850
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2900-3900] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2900, v_outer_boundary = 3900
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2950-3750] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2950, v_outer_boundary = 3750
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2950-3850] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2950, v_outer_boundary = 3850
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[2950-3900] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 2950, v_outer_boundary = 3900
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3050-3750] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3050, v_outer_boundary = 3750
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3050-3850] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3050, v_outer_boundary = 3850
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3050-3900] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3050, v_outer_boundary = 3900
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3150-3750] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3150, v_outer_boundary = 3750
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3150-3850] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3150, v_outer_boundary = 3850
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_plasma_vboundary[3150-3900] _______________________

config_init_trad_fname = '/home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/data/config_init_trad.yml'
v_inner_boundary = 3150, v_outer_boundary = 3900
atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')

    @pytest.mark.parametrize(
        "v_inner_boundary, v_outer_boundary",
        [
            (3350, 3650),
            (2900, 3750),
            (2900, 3850),
            (2900, 3900),
            (2950, 3750),
            (2950, 3850),
            (2950, 3900),
            (3050, 3750),
            (3050, 3850),
            (3050, 3900),
            (3150, 3750),
            (3150, 3850),
            (3150, 3900),
        ],
    )
    def test_plasma_vboundary(
        config_init_trad_fname,
        v_inner_boundary,
        v_outer_boundary,
        atomic_data_fname,
    ):
        tardis_config = Configuration.from_yaml(config_init_trad_fname)
        tardis_config.atom_data = atomic_data_fname
        tardis_config.model.structure.v_inner_boundary = (
            v_inner_boundary * u.km / u.s
        )
        tardis_config.model.structure.v_outer_boundary = (
            v_outer_boundary * u.km / u.s
        )
>       simulation = Simulation.from_config(tardis_config)

tardis/plasma/tests/test_plasma_vboundary.py:50: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError
_______________________ test_run_tardis_from_config_obj ________________________

atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    def test_run_tardis_from_config_obj(
        atomic_data_fname, example_configuration_dir: Path
    ):
        """
        Tests whether the run_tardis function can take in the Configuration object
        as arguments
        """
        config = Configuration.from_yaml(
            example_configuration_dir / "tardis_configv1_verysimple.yml"
        )
        config["atom_data"] = atomic_data_fname
    
        try:
>           sim = run_tardis(config)

tardis/tests/test_tardis_full.py:28: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
tardis/base.py:102: in run_tardis
    simulation = Simulation.from_config(
tardis/simulation/base.py:764: in from_config
    atom_data = parse_atom_data(config, atom_data=atom_data)
tardis/io/model/parse_atom_data.py:43: in parse_atom_data
    atom_data = AtomData.from_hdf(atom_data_fname)
tardis/io/atom_data/base.py:190: in from_hdf
    fname = resolve_atom_data_fname(fname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

fname = PosixPath('kurucz_cd23_chianti_H_He.h5')

    def resolve_atom_data_fname(fname):
        """
        Check where if atom data HDF file is available on disk, can be downloaded or does not exist
    
        Parameters
        ----------
        fname : Path
            name or path of atom data HDF file
    
        Returns
        -------
            : Path
            resolved fpath
        """
        fname = Path(fname)
        if os.path.exists(fname):
            return fname
    
        fname = Path(fname.stem).with_suffix(".h5")
        fpath = Path(os.path.join(get_data_dir(), fname))
        if os.path.exists(fpath):
            logger.info(
                f"\n\tAtom Data {fname} not found in local path.\n\tExists in TARDIS Data repo {fpath}"
            )
            return fpath
    
        atom_data_name = fname.stem
        atom_repo_config = get_atomic_repo_config()
        if atom_data_name in atom_repo_config:
>           raise OSError(
                f"Atom Data {fname} not found in path or in TARDIS data repo - it is available as download:\n"
                f"from tardis.io.atom_data import download_atom_data\n"
                f"download_atom_data('{atom_data_name}')"
            )
E           OSError: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/io/atom_data/util.py:42: OSError

During handling of the above exception, another exception occurred:

atomic_data_fname = PosixPath('../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5')
example_configuration_dir = PosixPath('tardis/io/configuration/tests/data')

    def test_run_tardis_from_config_obj(
        atomic_data_fname, example_configuration_dir: Path
    ):
        """
        Tests whether the run_tardis function can take in the Configuration object
        as arguments
        """
        config = Configuration.from_yaml(
            example_configuration_dir / "tardis_configv1_verysimple.yml"
        )
        config["atom_data"] = atomic_data_fname
    
        try:
            sim = run_tardis(config)
        except Exception as e:
>           pytest.fail(str(e.args[0]))
E           Failed: Atom Data kurucz_cd23_chianti_H_He.h5 not found in path or in TARDIS data repo - it is available as download:
E           from tardis.io.atom_data import download_atom_data
E           download_atom_data('kurucz_cd23_chianti_H_He')

tardis/tests/test_tardis_full.py:30: Failed
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_atom_data[0m][[1;37mINFO[0m   ]  
	
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5 ([1mparse_atom_data.py[0m:40)
------------------------------ Captured log call -------------------------------
INFO     tardis.io.model.parse_atom_data:parse_atom_data.py:40 
	Reading Atomic Data from tardis/io/configuration/tests/data/../tardis-regression-data/atom_data/kurucz_cd23_chianti_H_He.h5
__________________________ test_montecarlo_main_loop ___________________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e757e03b0>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>

    def test_montecarlo_main_loop(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_simulation = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=False,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation.run_convergence()
        montecarlo_main_loop_simulation.run_final()
    
        expected_hdf_store = regression_data.sync_hdf_store(
            montecarlo_main_loop_simulation
        )
    
        # Load compare data from refdata
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_hdf_store.close()
        transport_state = montecarlo_main_loop_simulation.transport.transport_state
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = (
            transport_state.radfield_mc_estimators.nu_bar_estimator
        )
        actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
    
        # Compare
>       npt.assert_allclose(
            actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-13
        )

tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:57: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e6f415760>, array([9.40448351e+28, 8.06019278e+28, 7.19997537e+28,....88449508e+28, 3.76156653e+28, 3.64401717e+28,
       3.53517538e+28, 3.45355503e+28, 3.34541304e+28, 3.26838651e+28]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-13, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-13, atol=0
E           
E           Mismatched elements: 20 / 20 (100%)
E           Max absolute difference among violations: 6.92504451e+25
E           Max relative difference among violations: 0.00085843
E            ACTUAL: array([9.404484e+28, 8.060193e+28, 7.199975e+28, 6.546968e+28,
E                  6.034739e+28, 5.613400e+28, 5.251242e+28, 4.985184e+28,
E                  4.726437e+28, 4.509526e+28, 4.320081e+28, 4.151235e+28,...
E            DESIRED: array([9.408704e+28, 8.067118e+28, 7.202414e+28, 6.547518e+28,
E                  6.033670e+28, 5.613552e+28, 5.249857e+28, 4.984256e+28,
E                  4.726016e+28, 4.509481e+28, 4.319969e+28, 4.151368e+28,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------
Iterations:                                                                                0/1 [00:00<?, ?it/s]
Packets:                                                                                   10895/? [08:32<00:00, 27.23it/s][A
Packets:                                                                                   22531/? [08:32<00:00, 93.10it/s][A
Packets:                                                                                   34476/? [08:32<00:00, 189.56it/s][A
Packets:                                                                                   46262/? [08:32<00:00, 325.27it/s][A
Packets:                                                                                   58021/? [08:32<00:00, 518.15it/s][A
Packets:                                                                                   69543/? [08:32<00:00, 787.04it/s][A
Packets:                                                                                   81621/? [08:32<00:00, 1187.55it/s][A
Packets:                                                                                   93401/? [08:32<00:00, 1740.95it/s][A
Packets:                                                                                   105122/? [08:32<00:00, 2518.49it/s][AIterations:████████████████████████████████████████████████████████████████████████████████1/1 [00:01<00:00,  1.01s/it]
Packets:                                                                                   108040/? [08:33<00:00, 2518.49it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
____________________ test_montecarlo_main_loop_vpacket_log _____________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7e74c92510>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>

    def test_montecarlo_main_loop_vpacket_log(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_config.montecarlo.no_of_virtual_packets = 5
    
        montecarlo_main_loop_simulation = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=True,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation.run_convergence()
        montecarlo_main_loop_simulation.run_final()
    
        transport = montecarlo_main_loop_simulation.transport
    
        assert transport.montecarlo_configuration.ENABLE_VPACKET_TRACKING is True
    
        expected_hdf_store = regression_data.sync_hdf_store(
            montecarlo_main_loop_simulation
        )
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_vpacket_log_nus = expected_hdf_store[
            "/simulation/transport/transport_state/virt_packet_nus"
        ]
        expected_vpacket_log_energies = expected_hdf_store[
            "/simulation/transport/transport_state/virt_packet_energies"
        ]
    
        transport_state = transport.transport_state
    
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = transport_state.nu_bar_estimator
        actual_j_estimator = transport_state.j_estimator
        actual_vpacket_log_nus = transport_state.vpacket_tracker.nus
        actual_vpacket_log_energies = transport_state.vpacket_tracker.energies
    
        expected_hdf_store.close()
        # Compare
>       npt.assert_allclose(
            actual_nu_bar_estimator,
            expected_nu_bar_estimator,
            rtol=1e-12,
            atol=1e-15,
        )

tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py:120: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e71852de0>, array([9.39632189e+28, 8.06452049e+28, 7.18754600e+28,....86491193e+28, 3.76603462e+28, 3.65184134e+28,
       3.55625311e+28, 3.45809153e+28, 3.35093337e+28, 3.25549805e+28]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-12, atol=1e-15', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-12, atol=1e-15
E           
E           Mismatched elements: 20 / 20 (100%)
E           Max absolute difference among violations: 2.81924274e+25
E           Max relative difference among violations: 0.0005693
E            ACTUAL: array([9.396322e+28, 8.064520e+28, 7.187546e+28, 6.550714e+28,
E                  6.032264e+28, 5.628320e+28, 5.284222e+28, 4.954908e+28,
E                  4.717867e+28, 4.492582e+28, 4.303848e+28, 4.140613e+28,...
E            DESIRED: array([9.397342e+28, 8.064372e+28, 7.189479e+28, 6.549756e+28,
E                  6.033450e+28, 5.626927e+28, 5.281881e+28, 4.952089e+28,
E                  4.716388e+28, 4.491655e+28, 4.302267e+28, 4.139741e+28,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.135e+42 erg / s
	Luminosity absorbed  = 2.646e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------
Iterations:                                                                                0/1 [00:00<?, ?it/s]        
Packets:                                                                                   116520/? [08:34<00:00, 3052.61it/s][A
Packets:                                                                                   124632/? [08:35<00:00, 3889.32it/s][A
Packets:                                                                                   131346/? [08:35<00:00, 4825.65it/s][A
Packets:                                                                                   137103/? [08:35<00:00, 5894.26it/s][A
Packets:                                                                                   142167/? [08:35<00:00, 7134.96it/s][A
Packets:                                                                                   146754/? [08:35<00:00, 8588.52it/s][A
Packets:                                                                                   151003/? [08:35<00:00, 10307.76it/s][A
Packets:                                                                                   155042/? [08:35<00:00, 12311.20it/s][A
Packets:                                                                                   158926/? [08:36<00:00, 14578.46it/s][A
Packets:                                                                                   162693/? [08:36<00:00, 17064.71it/s][A
Packets:                                                                                   166381/? [08:36<00:00, 19645.57it/s][A
Packets:                                                                                   170002/? [08:36<00:00, 22275.55it/s][A
Packets:                                                                                   173596/? [08:36<00:00, 24782.91it/s][A
Packets:                                                                                   177171/? [08:36<00:00, 26962.09it/s][A
Packets:                                                                                   180752/? [08:36<00:00, 29010.52it/s][A
Packets:                                                                                   184309/? [08:36<00:00, 30347.87it/s][A
Packets:                                                                                   187864/? [08:36<00:00, 31701.21it/s][A
Packets:                                                                                   191401/? [08:36<00:00, 32694.03it/s][A
Packets:                                                                                   194932/? [08:37<00:00, 33416.02it/s][A
Packets:                                                                                   198462/? [08:37<00:00, 33826.39it/s][A
Packets:                                                                                   201978/? [08:37<00:00, 33836.88it/s][A
Packets:                                                                                   205480/? [08:37<00:00, 34178.45it/s][AIterations:████████████████████████████████████████████████████████████████████████████████1/1 [00:03<00:00,  3.06s/it]
Packets:                                                                                   208040/? [08:37<00:00, 34178.45it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.135e+42 erg / s
	Luminosity absorbed  = 2.646e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
__________________________ test_boundary_interactions __________________________

rpacket_tracker = ListType[instance.jitclass.RPacketTracker#7f7ed56611c0<seed:int64,index:int64,status:array(int64, 1d, A),r:array(float...PacketTracker object at 0x7f7e6d514340>, <numba.experimental.jitclass.boxing.RPacketTracker object at 0x7f7e6d517910>])
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7dd7264fe0>

    def test_boundary_interactions(rpacket_tracker, regression_data):
        no_of_packets = len(rpacket_tracker)
    
        # Hard coding the number of columns
        # Based on the largest size of boundary_interaction array (60)
        obtained_boundary_interaction = np.full(
            (no_of_packets, 64),
            [-1],
            dtype=rpacket_tracker[0].boundary_interaction.dtype,
        )
    
        for i, tracker in enumerate(rpacket_tracker):
>           obtained_boundary_interaction[
                i, : tracker.boundary_interaction.size
            ] = tracker.boundary_interaction
E           ValueError: could not broadcast input array from shape (77,) into shape (64,)

tardis/transport/montecarlo/tests/test_rpacket_tracker.py:147: ValueError
______________________ test_montecarlo_main_loop_weighted ______________________

montecarlo_main_loop_config = {'tardis_config_version': 'v1.0', 'supernova': {'luminosity_requested': <Quantity 1.07688e+36 W>, 'time_explosion': <Q...able_biasing': False}, 'method': 'virtual', 'integrated': {'points': 1000, 'interpolate_shells': 0, 'compute': 'CPU'}}}
regression_data = <tardis.tests.fixtures.regression_data.RegressionData object at 0x7f7dc0eebb00>
atomic_dataset = <Atomic Data UUID=6f7b09e887a311e7a06b246e96350010 MD5=864f1753714343c41f99cb065710cace Lines=29224 Levels=24806>
simple_weighted_packet_source = <tardis.transport.montecarlo.weighted_packet_source.BlackBodyWeightedSource object at 0x7f7e8fb0d310>

    def test_montecarlo_main_loop_weighted(
        montecarlo_main_loop_config,
        regression_data,
        atomic_dataset,
        simple_weighted_packet_source,
    ):
        atomic_dataset = deepcopy(atomic_dataset)
        montecarlo_main_loop_simulation_weighted = Simulation.from_config(
            montecarlo_main_loop_config,
            atom_data=atomic_dataset,
            virtual_packet_logging=False,
            legacy_mode_enabled=True,
        )
        montecarlo_main_loop_simulation_weighted.packet_source = (
            simple_weighted_packet_source
        )
        montecarlo_main_loop_simulation_weighted.run_convergence()
        montecarlo_main_loop_simulation_weighted.run_final()
    
        # Get the montecarlo simple regression data
        regression_data_dir = (
            regression_data.absolute_regression_data_dir.absolute().parents[0]
            / "test_montecarlo_main_loop/test_montecarlo_main_loop.h5"
        )
        expected_hdf_store = pd.HDFStore(regression_data_dir, mode="r")
    
        # Load compare data from refdata
    
        expected_nu = expected_hdf_store[
            "/simulation/transport/transport_state/output_nu"
        ]
        expected_energy = expected_hdf_store[
            "/simulation/transport/transport_state/output_energy"
        ]
        expected_nu_bar_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/nu_bar_estimator"
        ]
        expected_j_estimator = expected_hdf_store[
            "/simulation/transport/transport_state/j_estimator"
        ]
        expected_hdf_store.close()
        transport_state = (
            montecarlo_main_loop_simulation_weighted.transport.transport_state
        )
        actual_energy = transport_state.packet_collection.output_energies
        actual_nu = transport_state.packet_collection.output_nus
        actual_nu_bar_estimator = (
            transport_state.radfield_mc_estimators.nu_bar_estimator
        )
        actual_j_estimator = transport_state.radfield_mc_estimators.j_estimator
    
        # Compare
        npt.assert_allclose(
            actual_nu_bar_estimator, expected_nu_bar_estimator, rtol=1e-2
        )
        npt.assert_allclose(actual_j_estimator, expected_j_estimator, rtol=1e-2)
>       npt.assert_allclose(actual_energy, expected_energy, rtol=1e-2)

tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py:65: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7de9a46020>, array([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-...ay([ 1.00808590e-05, -9.64774183e-06,  1.03040156e-05, ...,
        1.03375439e-05, -9.75713585e-06,  1.01976360e-05]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.01, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.01, atol=0
E           
E           Mismatched elements: 75 / 100000 (0.075%)
E           Max absolute difference among violations: 2.01554089e-05
E           Max relative difference among violations: 2.08104546
E            ACTUAL: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
E                  -9.757136e-06,  1.019764e-05])
E            DESIRED: array([ 1.008086e-05, -9.647742e-06,  1.030402e-05, ...,  1.033754e-05,
E                  -9.757136e-06,  1.019764e-05])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
----------------------------- Captured stdout call -----------------------------
[[1mtardis.io.model.parse_density_configuration[0m][[1;33mWARNING[0m]  
	Number of density points larger than number of shells. Assuming inner point irrelevant ([1mparse_density_configuration.py[0m:114)
[[1mtardis.model.matter.decay[0m][[1;37mINFO[0m   ]  
	Decaying abundances for 1123200.0 seconds ([1mdecay.py[0m:101)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Simulation finished in 0 iterations 
	Simulation took 0.00 s
 ([1mbase.py[0m:542)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Starting iteration 1 of 1 ([1mbase.py[0m:444)
[[1mtardis.simulation.base[0m][[1;37mINFO[0m   ]  
	
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
 ([1mbase.py[0m:657)
----------------------------- Captured stderr call -----------------------------
Iterations:                                                                                0/1 [00:00<?, ?it/s]        
Packets:                                                                                   0/100000 [00:00<?, ?it/s]            [A
Packets:                                                                                   0/100000 [00:00<?, ?it/s][A
Packets:   █████████▊                                                                      12296/100000 [00:00<00:00, 122953.67it/s][A
Packets:   ███████████████████▋                                                            24660/100000 [00:00<00:00, 123355.55it/s][A
Packets:   █████████████████████████████▋                                                  37132/100000 [00:00<00:00, 123978.49it/s][A
Packets:   ███████████████████████████████████████▌                                        49530/100000 [00:00<00:00, 123712.36it/s][A
Packets:   █████████████████████████████████████████████████▌                              61986/100000 [00:00<00:00, 124015.52it/s][A
Packets:   ███████████████████████████████████████████████████████████▌                    74388/100000 [00:00<00:00, 123986.45it/s][A
Packets:   █████████████████████████████████████████████████████████████████████▍          86787/100000 [00:00<00:00, 123971.24it/s][A
Packets:   ███████████████████████████████████████████████████████████████████████████████▍99230/100000 [00:00<00:00, 124116.29it/s][AIterations:████████████████████████████████████████████████████████████████████████████████1/1 [00:00<00:00,  1.07it/s]
Packets:   ███████████████████████████████████████████████████████████████████████████████▉99999/100000 [00:00<00:00, 124116.29it/s][A
------------------------------ Captured log call -------------------------------
WARNING  tardis.io.model.parse_density_configuration:parse_density_configuration.py:114 Number of density points larger than number of shells. Assuming inner point irrelevant
INFO     tardis.model.matter.decay:decay.py:101 Decaying abundances for 1123200.0 seconds
INFO     tardis.simulation.base:base.py:542 
	Simulation finished in 0 iterations 
	Simulation took 0.00 s

INFO     tardis.simulation.base:base.py:444 
	Starting iteration 1 of 1
INFO     tardis.simulation.base:base.py:657 
	Luminosity emitted   = 8.101e+42 erg / s
	Luminosity absorbed  = 2.679e+42 erg / s
	Luminosity requested = 1.077e+43 erg / s
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data0-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56a7ec0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e505ab4c0>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...1104.14894249, 11194.10880903, 12818.679236  ,
       12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (503,), (508,) mismatch)
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data1-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c0620>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584cc720>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...47464 ,
       12229.96880815, 12113.40540961, 12605.43283975, 12605.43283975,
       11152.96259546, 11172.04481521]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 558 / 558 (100%)
E           Max absolute difference among violations: 5978.84516144
E           Max relative difference among violations: 0.4321623
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data2-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c07d0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584cc680>, array([11193.08324978, 13536.93126023, 11647.60804688,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
       15754.62784966, 13174.4766832 , 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (134,), (147,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data3-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c0a10>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584cdbc0>, array([11193.08324978, 13536.93126023, 11647.60804688,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
       12229.96880815, 12113.40540961, 11152.96259546]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (147,), (159,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data4-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c0c50>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584ce7a0>, array([11852.9138581 , 11852.9138581 , 11852.9138581 ,...1104.14894249, 11194.10880903, 12818.679236  ,
       12978.92050419, 12978.92050419, 12978.92050419, 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (503,), (508,) mismatch)
E            ACTUAL: array([11852.913858, 11852.913858, 11852.913858, 11381.456285,
E                  12643.551092, 11481.82435 , 11481.82435 , 11481.82435 ,
E                  11682.770457, 11121.761454, 11826.139986, 11151.276115,...
E            DESIRED: array([12955.141698, 12955.141698, 12955.141698, 11622.249767,
E                  12079.529869, 12630.218315, 11469.83903 , 11810.966898,
E                  11966.991343, 11812.499308, 11222.198064, 11263.637708,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c0e90>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584ccfe0>, array([11061.80943238, 12248.18222883, 11489.53606278,...), array([13692.75973672, 11362.93720064, 12466.53861691, ...,
       12605.43283975, 11152.96259546, 11172.04481521]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (1435,), (1466,) mismatch)
E            ACTUAL: array([11061.809432, 12248.182229, 11489.536063, ..., 13052.865391,
E                  11383.689745, 11102.237019])
E            DESIRED: array([13692.759737, 11362.937201, 12466.538617, ..., 12605.43284 ,
E                  11152.962595, 11172.044815])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors] _

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c0f50>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors]>>
attribute = 'plot_colors'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584cd6c0>, array([0.        , 0.        , 0.5       , 1.        ,...   1.        , 1.        , 0.40740741, 0.        , 1.        ,
       0.5       , 0.        , 0.        , 1.        ]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (20,), (24,) mismatch)
E            ACTUAL: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      ])
E            DESIRED: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      , 0.5     , 0.      , 0.      , 1.      ])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data6-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c10d0>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e584207c0>, array([11193.08324978, 13536.93126023, 11647.60804688,...1230.42147828, 11476.76563893, 11681.6907767 , 12060.43339088,
       15754.62784966, 13174.4766832 , 11238.83568899]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (134,), (147,) mismatch)
E            ACTUAL: array([11193.08325 , 13536.93126 , 11647.608047, 11992.657901,
E                  15280.372922, 11647.007285, 11787.879439, 15144.426129,
E                  11822.894648, 14558.460905, 11033.525762, 14395.756654,...
E            DESIRED: array([12079.529869, 11966.991343, 11263.637708, 14098.493392,
E                  13656.398245, 12124.454378, 11838.909334, 12616.241701,
E                  12885.214103, 12350.428924, 15397.475192, 11754.522961,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_data] __

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1340>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]>>
attribute = 'plot_data'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e58420b80>, array([11107.03324206, 11193.08324978, 13536.93126023,...2231.98601298, 11655.02975796, 11272.58254501, 12373.5847464 ,
       12229.96880815, 12113.40540961, 11152.96259546]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (367,), (379,) mismatch)
E            ACTUAL: array([11107.033242, 11193.08325 , 13536.93126 , 11647.608047,
E                  11992.657901, 15280.372922, 11647.007285, 11787.879439,
E                  15144.426129, 11822.894648, 14558.460905, 11033.525762,...
E            DESIRED: array([12466.538617, 14269.760975, 11910.794005, 11196.260702,
E                  11633.386223, 12079.529869, 11966.991343, 11263.637708,
E                  14098.493392, 13656.398245, 12124.454378, 11838.909334,...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
_ TestLIVPlotter.test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors] _

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1430>
plotter_prepare_plot_data = <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>
request = <FixtureRequest for <Function test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors]>>
attribute = 'plot_colors'

    @pytest.mark.parametrize(
        "attribute",
        [
            "plot_data",
            "plot_colors",
            "new_bin_edges",
        ],
    )
    def test_prepare_plot_data(
        self,
        plotter_prepare_plot_data,
        request,
        attribute,
    ):
        """
        Test for the _prepare_plot_data method in LIVPlotter.
    
        Parameters:
        -----------
        plotter_prepare_plot_data: The plotter instance with prepared data.
        request: Pytest's request fixture.
        attribute: The attribute to test after preparing the plot data.
        """
        regression_data = RegressionData(request)
        if attribute == "plot_data" or attribute == "plot_colors":
            plot_object = getattr(plotter_prepare_plot_data, attribute)
            plot_object = [item for sublist in plot_object for item in sublist]
            if all(isinstance(item, u.Quantity) for item in plot_object):
                plot_object = [item.value for item in plot_object]
            data = regression_data.sync_ndarray(plot_object)
>           np.testing.assert_allclose(plot_object, data)

tardis/visualization/tools/tests/test_liv_plot.py:210: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e58420540>, array([0.        , 0.        , 0.5       , 1.        ,...   1.        , 1.        , 0.40740741, 0.        , 1.        ,
       0.5       , 0.        , 0.        , 1.        ]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           (shapes (20,), (24,) mismatch)
E            ACTUAL: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      ])
E            DESIRED: array([0.      , 0.      , 0.5     , 1.      , 0.      , 0.3     ,
E                  1.      , 1.      , 0.16129 , 1.      , 0.806452, 1.      ,
E                  0.806452, 1.      , 0.16129 , 1.      , 1.      , 0.407407,
E                  0.      , 1.      , 0.5     , 0.      , 0.      , 1.      ])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl0] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c17c0>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7e74c8dbe0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl0]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e60723ec0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:420)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:420 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl1] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1880>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7deaf0e990>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl1]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e60736b60>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl4] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1c70>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7de9a0ed80>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl4]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e503c8f40>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
         1,   0,   0,   5,   5,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 6 / 20 (30%)
E           Max absolute difference among violations: 18
E           Max relative difference among violations: 0.5
E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
E                    2,   5,   5,   5,   5,   0,   0])
E            DESIRED: array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
E                    1,   0,   0,   5,   5,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl5] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1d30>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7e74cb5af0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl5]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e5079a0c0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_mpl[plotter_generate_plot_mpl7] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c1eb0>
generate_plot_mpl_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7e8faa51c0>
plotter_generate_plot_mpl = (<Axes: xlabel='Last Interaction Velocity (km/s)', ylabel='Packet Count'>, <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_mpl7]>>

    def test_generate_plot_mpl(
        self, generate_plot_mpl_hdf, plotter_generate_plot_mpl, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        -----------
        generate_plot_mpl_hdf: The PlotDataHDF fixture for Matplotlib.
        plotter_generate_plot_mpl: The Matplotlib plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_mpl
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_mpl_hdf)
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_mpl_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
                np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )
            else:
                assert np.array_equal(expected_values, actual_values)
    
        labels = expected["plot_data_hdf/scalars"]
        for index1, data in enumerate(fig.get_children()):
            if isinstance(data.get_label(), str):
                assert (
                    getattr(labels, "label" + str(index1)).decode()
                    == data.get_label()
                )
            if isinstance(data, Line2D):
>               np.testing.assert_allclose(
                    data.get_xydata(),
                    expected.get("plot_data_hdf/" + "data" + str(index1)),
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:335: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e50761080>, array([[1.10e+04, 6.00e+01],
       [1.19e+04, 6.00e+0...,
       [1.82e+04, 0.00e+00],
       [1.91e+04, 0.00e+00],
       [1.91e+04, 0.00e+00],
       [2.00e+04, 0.00e+00]]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 12 / 40 (30%)
E           Max absolute difference among violations: 58.
E           Max relative difference among violations: 30.
E            ACTUAL: array([[1.10e+04, 6.00e+01],
E                  [1.19e+04, 6.00e+01],
E                  [1.19e+04, 3.10e+01],...
E            DESIRED: array([[1.10e+04, 2.00e+00],
E                  [1.19e+04, 2.00e+00],
E                  [1.19e+04, 1.00e+00],...

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply0] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c15b0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7e8cd3db50>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply0]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8b75f2e0>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	Both nelements and species_list were requested. Species_list takes priority; nelements is ignored ([1mliv_plot.py[0m:522)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:522 Both nelements and species_list were requested. Species_list takes priority; nelements is ignored
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply1] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c2b10>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7db8d190d0>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply1]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8b75f920>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply4] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c2f00>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7db8d1b590>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(127, 0, 0)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply4]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8b75e520>, array([272, 272, 110, 110,  62,  62,  33,  33,   7,   ...]), array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
         1,   0,   0,   5,   5,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 6 / 20 (30%)
E           Max absolute difference among violations: 18
E           Max relative difference among violations: 0.5
E            ACTUAL: array([272, 272, 110, 110,  62,  62,  33,  33,   7,   7,  12,  12,   2,
E                    2,   5,   5,   5,   5,   0,   0])
E            DESIRED: array([288, 288, 120, 120,  44,  44,  22,  22,  13,  13,  10,  10,   1,
E                    1,   0,   0,   5,   5,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['Si IV'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['Si IV'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply5] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c2fc0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7de949a9f0>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply5]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
>               np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )

tardis/visualization/tools/tests/test_liv_plot.py:486: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8b75ee80>, array([112, 112,  85,  85,  34,  34,  13,  13,  10,  1...]), array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
         0,   1,   1,   0,   0,   0,   0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 2 / 20 (10%)
E           Max absolute difference among violations: 30
E           Max relative difference among violations: 0.54545455
E            ACTUAL: array([112, 112,  85,  85,  34,  34,  13,  13,  10,  10,   0,   0,   1,
E                    1,   2,   2,   0,   0,   0,   0])
E            DESIRED: array([132, 132,  55,  55,  29,  29,  21,  21,   7,   7,   0,   0,   0,
E                    0,   1,   1,   0,   0,   0,   0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O I', 'O III', 'Si IV', 'S I', 'S IV', 'Ar I', 'Ar III'] were not found in the provided wavelength range.
______ TestLIVPlotter.test_generate_plot_ply[plotter_generate_plot_ply7] _______

self = <tardis.visualization.tools.tests.test_liv_plot.TestLIVPlotter object at 0x7f7eb56c3140>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_liv_plot.PlotDataHDF object at 0x7f7dc0fcb770>
plotter_generate_plot_ply = (Figure({
    'data': [{'line': {'color': 'rgb(0, 0, 127)', 'shape': 'hv', 'width': 2.5},
              'mode': 'lines...'e', 'title': {'text': 'Packet Count'}}}
}), <tardis.visualization.tools.liv_plot.LIVPlotter object at 0x7f7e8cf9ffe0>)
request = <FixtureRequest for <Function test_generate_plot_ply[plotter_generate_plot_ply7]>>

    def test_generate_plot_ply(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        """
        Test for the generate_plot_mpl method in LIVPlotter.
    
        Compares generated plot data with regression data.
    
        Parameters:
        ----------
        generate_plot_plotly_hdf: The PlotDataHDF fixture for Plotly.
        plotter_generate_plot_mpl: The Plotly plotter fixture.
        request: Pytest's request fixture.
        """
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list", "step_x", "step_y"]:
            expected_values = expected.get(
                "plot_data_hdf/" + item
            ).values.flatten()
            actual_values = getattr(generate_plot_plotly_hdf, item)
    
            if np.issubdtype(expected_values.dtype, np.number):
                np.testing.assert_allclose(
                    expected_values,
                    actual_values,
                    rtol=0.3,
                    atol=3,
                )
            else:
                assert np.array_equal(expected_values, actual_values)
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x,
                expected.get(group + "x").values.flatten(),
                rtol=0.3,
                atol=3,
            )
>           np.testing.assert_allclose(
                data.y,
                expected.get(group + "y").values.flatten(),
                rtol=0.3,
                atol=3,
            )

tardis/visualization/tools/tests/test_liv_plot.py:518: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e487e53a0>, array([60, 60, 31, 31, 18, 18, 12, 12,  7,  7,  5,  5,  0,  0,  0,  0,  1,
        1,  0,  0]), array([2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=0.3, atol=3', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=0.3, atol=3
E           
E           Mismatched elements: 12 / 20 (60%)
E           Max absolute difference among violations: 58
E           Max relative difference among violations: 30.
E            ACTUAL: array([60, 60, 31, 31, 18, 18, 12, 12,  7,  7,  5,  5,  0,  0,  0,  0,  1,
E                   1,  0,  0])
E            DESIRED: array([2, 2, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
---------------------------- Captured stdout setup -----------------------------
[[1mtardis.visualization.tools.liv_plot[0m][[1;37mINFO[0m   ]  
	['O III'] were not found in the provided wavelength range. ([1mliv_plot.py[0m:239)
------------------------------ Captured log setup ------------------------------
INFO     tardis.visualization.tools.liv_plot:liv_plot.py:239 ['O III'] were not found in the provided wavelength range.
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data0] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56eed80>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e6bf4c440>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data0]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c09de40>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data1] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56ef3b0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e7182e840>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data1]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e5059f7e0>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data2] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56ec410>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7df40ceff0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data2]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c030360>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data3] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56ef830>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e6d4ad580>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data3]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c07bd80>, array([1.52915501e-06, 1.14259976e-06, 1.97184927e-06,...), array([1.53211324e-06, 1.14480943e-06, 1.97566465e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 4.33016083e-05
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.529155e-06, 1.142600e-06, 1.971849e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.532113e-06, 1.144809e-06, 1.975665e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data4] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56ef8f0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e95d4c2f0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data4]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c030220>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data5] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56ef9b0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e6d4adbb0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data5]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c029760>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data6] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efa70>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e6f4ce8a0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data6]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02af20>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data7] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efb30>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8fb99850>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data7]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e5059f7e0>, array([3.23052456e-06, 1.63478438e-06, 3.61797977e-06,...), array([3.59555432e-06, 1.68536709e-06, 3.01523328e-06, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 5.4915623e-05
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.230525e-06, 1.634784e-06, 3.617980e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([3.595554e-06, 1.685367e-06, 3.015233e-06, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data8] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efbf0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e95e9a6f0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data8]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c0323e0>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data9] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efcb0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e506dd670>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data9]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c09c220>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data10] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efd70>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e9f827530>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data10]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c028d60>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data11] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efe30>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8fbafe60>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data11]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02ade0>, array([1.82962660e+46, 1.36711511e+46, 2.35930815e+46,...), array([1.83316611e+46, 1.36975896e+46, 2.36387324e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 610 / 1938 (31.5%)
E           Max absolute difference among violations: 5.18101657e+47
E           Max relative difference among violations: 4.03018084
E            ACTUAL: array([1.829627e+46, 1.367115e+46, 2.359308e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([1.833166e+46, 1.369759e+46, 2.363873e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data12] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56efef0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e71a638c0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data12]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02b9c0>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data13] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb56effb0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7eb49d92b0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data13]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c030f40>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data14] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb57080b0>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7eb56c0bf0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data14]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c030220>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_ TestSDECPlotter.test_calculate_plotting_data[plotter_calculate_plotting_data15] _

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708170>
plotter_calculate_plotting_data = <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>
calculate_plotting_data_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e9f38a6f0>
request = <FixtureRequest for <Function test_calculate_plotting_data[plotter_calculate_plotting_data15]>>

    def test_calculate_plotting_data(
        self,
        plotter_calculate_plotting_data,
        calculate_plotting_data_hdf,
        request,
    ):
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(calculate_plotting_data_hdf)
        group = "plot_data_hdf/"
        for attribute_type, attribute_name in self.plotting_data_attributes:
            plot_object = getattr(
                plotter_calculate_plotting_data, attribute_name
            )
            if attribute_type == "attributes_np":
                if isinstance(plot_object, astropy.units.quantity.Quantity):
                    plot_object = plot_object.cgs.value
>               np.testing.assert_allclose(
                    plot_object, expected.get(group + attribute_name)
                )

tardis/visualization/tools/tests/test_sdec_plot.py:227: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02a840>, array([3.86530707e+46, 1.95601164e+46, 4.32889537e+46,...), array([4.30206343e+46, 2.01653360e+46, 3.60771209e+46, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 697 / 1938 (36%)
E           Max absolute difference among violations: 6.57062783e+47
E           Max relative difference among violations: 50149.82031431
E            ACTUAL: array([3.865307e+46, 1.956012e+46, 4.328895e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([4.302063e+46, 2.016534e+46, 3.607712e+46, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply0] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708470>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7dd5847350>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply0]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02b380>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply1] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708530>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e74898ce0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply1]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c028d60>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply2] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708920>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8fbadb20>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply2]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02ab60>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply3] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb57089e0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8fb99f70>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply3]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7670a7a0>, array([3.82152740e-15, 3.88350733e-15, 1.58629581e-14,...), array([7.65507159e-15, 3.89102019e-15, 1.58936459e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 1.8511615e-13
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([3.821527e-15, 3.883507e-15, 1.586296e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([7.655072e-15, 3.891020e-15, 1.589365e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply4] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708aa0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7df413a360>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply4]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7670b560>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply5] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708b90>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8cce12b0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply5]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c030720>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply6] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708c80>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e5067bef0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply6]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7670ac00>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply7] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708d40>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7df41222d0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...\\,\\mathring{A}^{-1}\\,cm^{-2}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply7]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e767093a0>, array([8.04164908e-15, 5.82923281e-15, 2.43062571e-14,...), array([5.81620934e-15, 7.68544667e-15, 1.64359739e-14, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.02703484e-13
E           Max relative difference among violations: 16816.91196075
E            ACTUAL: array([8.041649e-15, 5.829233e-15, 2.430626e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([5.816209e-15, 7.685447e-15, 1.643597e-14, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply8] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708e00>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8cd18050>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply8]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7673d120>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
______ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply9] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708ec0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e8cdae2a0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply9]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e8c02ab60>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply10] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5708f80>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e75af4b90>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply10]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7670a7a0>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply11] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5709040>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7dc0f6f1d0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply11]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7673ce00>, array([4.57243913e+37, 4.64659781e+37, 1.89799530e+38,...), array([9.15925628e+37, 4.65558691e+37, 1.90166708e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 446 / 1938 (23%)
E           Max absolute difference among violations: 2.21490582e+39
E           Max relative difference among violations: 2.48849949
E            ACTUAL: array([4.572439e+37, 4.646598e+37, 1.897995e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([9.159256e+37, 4.655587e+37, 1.901667e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply12] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5709100>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7dd5846060>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply12]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7673d3a0>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply13] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb57091c0>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7df414e3f0>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply13]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7670a2a0>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply14] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5709280>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7e5067a510>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply14]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7673ccc0>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
_____ TestSDECPlotter.test_generate_plot_mpl[plotter_generate_plot_ply15] ______

self = <tardis.visualization.tools.tests.test_sdec_plot.TestSDECPlotter object at 0x7f7eb5709340>
generate_plot_plotly_hdf = <tardis.visualization.tools.tests.test_sdec_plot.PlotDataHDF object at 0x7f7dc0f1b020>
plotter_generate_plot_ply = (Figure({
    'data': [{'fillcolor': '#4C4C4C',
              'hovertemplate': '(%{x:.2f}, %{y:.3g})',
              '...g\\,s^{-1}\\,\\mathring{A}^{-1}}]$'}}}
}), <tardis.visualization.tools.sdec_plot.SDECPlotter object at 0x7f7e9f614d10>)
request = <FixtureRequest for <Function test_generate_plot_mpl[plotter_generate_plot_ply15]>>

    def test_generate_plot_mpl(
        self, generate_plot_plotly_hdf, plotter_generate_plot_ply, request
    ):
        fig, _ = plotter_generate_plot_ply
        regression_data = RegressionData(request)
        expected = regression_data.sync_hdf_store(generate_plot_plotly_hdf)
    
        for item in ["_species_name", "_color_list"]:
            np.testing.assert_array_equal(
                expected.get("plot_data_hdf/" + item).values.flatten(),
                getattr(generate_plot_plotly_hdf, item),
            )
    
        for index, data in enumerate(fig.data):
            group = "plot_data_hdf/" + "_" + str(index)
            if data.stackgroup:
                assert (
                    data.stackgroup
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "stackgroup",
                    ).decode()
                )
            if data.name:
                assert (
                    data.name
                    == getattr(
                        expected["/plot_data_hdf/scalars"],
                        "_" + str(index) + "name",
                    ).decode()
                )
            np.testing.assert_allclose(
                data.x, expected.get(group + "x").values.flatten()
            )
>           np.testing.assert_allclose(
                data.y, expected.get(group + "y").values.flatten()
            )

tardis/visualization/tools/tests/test_sdec_plot.py:417: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

args = (<function assert_allclose.<locals>.compare at 0x7f7e7673f740>, array([9.62179439e+37, 6.97464897e+37, 2.90823196e+38,...), array([6.95906645e+37, 9.19559992e+37, 1.96655636e+38, ...,
       0.00000000e+00, 0.00000000e+00, 0.00000000e+00]))
kwds = {'equal_nan': True, 'err_msg': '', 'header': 'Not equal to tolerance rtol=1e-07, atol=0', 'strict': False, ...}

    @wraps(func)
    def inner(*args, **kwds):
        with self._recreate_cm():
>           return func(*args, **kwds)
E           AssertionError: 
E           Not equal to tolerance rtol=1e-07, atol=0
E           
E           Mismatched elements: 536 / 1938 (27.7%)
E           Max absolute difference among violations: 3.6218326e+39
E           Max relative difference among violations: 16816.91195075
E            ACTUAL: array([9.621794e+37, 6.974649e+37, 2.908232e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])
E            DESIRED: array([6.959066e+37, 9.195600e+37, 1.966556e+38, ..., 0.000000e+00,
E                  0.000000e+00, 0.000000e+00])

../../miniforge3/envs/tardis_numpy/lib/python3.12/contextlib.py:81: AssertionError
=============================== warnings summary ===============================
tardis/io/configuration/config_validator.py:6
tardis/io/configuration/config_validator.py:6
  /home/aryaatharva18/tardis-main/tardis/tardis/io/configuration/config_validator.py:6: DeprecationWarning:
  
  jsonschema.RefResolver is deprecated as of v4.18.0, in favor of the https://github.com/python-jsonschema/referencing library, which provides more compliant referencing behavior as well as more flexible APIs for customization. A future release will remove RefResolver. Please file a feature request (on referencing) if you are missing an API for the kind of customization you need.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/jupyter_client/connect.py:22
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/jupyter_client/connect.py:22: DeprecationWarning:
  
  Jupyter is migrating its paths to use standard platformdirs
  given by the platformdirs library.  To remove this warning and
  see the appropriate new directories, set the environment variable
  `JUPYTER_PLATFORM_DIRS=1` and then run `jupyter --paths`.
  The use of platformdirs will be the default in `jupyter_core` v6

tardis/plasma/properties/__init__.py:17
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/properties/__init__.py:17: DeprecationWarning:
  
  The numpy.linalg.linalg has been made private and renamed to numpy.linalg._linalg. All public functions exported by it are available from numpy.linalg. Please use numpy.linalg.LinAlgError instead.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2599: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/indexes/multi.py:2598: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: 1 warning
tardis/energy_input/tests/test_gamma_ray_channel.py: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/io/tests/test_decay.py: 2 warnings
tardis/model/tests/test_base.py: 5 warnings
tardis/model/tests/test_csvy_model.py: 15 warnings
tardis/plasma/equilibrium/tests/test_collisional_transitions.py: 2 warnings
tardis/plasma/equilibrium/tests/test_level_populations.py: 8 warnings
tardis/plasma/equilibrium/tests/test_rate_matrix.py: 2 warnings
tardis/plasma/tests/test_nlte_solver.py: 16 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int8.

../../miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: 1 warning
tardis/io/tests/test_atomic.py: 1 warning
tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/pandas/core/sorting.py:349: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int16.

tardis/io/tests/test_HDFWriter.py::test_multi_index_write
tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:276: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]

tardis/io/tests/test_model_reader.py::test_read_cmfgen_isotope_abundances
tardis/plasma/tests/test_tardis_model_density_config.py::test_electron_densities
tardis/plasma/tests/test_tardis_model_density_config.py::test_isotope_number_densities
tardis/plasma/tests/test_tardis_model_density_config.py::test_t_rad
  /home/aryaatharva18/tardis-main/tardis/tardis/io/model/readers/cmfgen_deprecated.py:82: DeprecationWarning:
  
  The current CMFGEN model parser is deprecated

tardis/io/tests/test_model_reader.py: 1 warning
tardis/plasma/tests/test_tardis_model_density_config.py: 9 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/io/model/readers/cmfgen_deprecated.py:40: DeprecationWarning:
  
  The current CMFGEN model parser is deprecated

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
tardis/spectrum/tests/test_numba_formal_integral.py::test_intensity_black_body[0-1]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numexpr/expressions.py:285: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
tardis/spectrum/tests/test_numba_formal_integral.py::test_intensity_black_body[0-1]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numexpr/expressions.py:295: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/model/tests/test_base.py::TestModelFromPaper1Config::test_abundances
  /home/aryaatharva18/tardis-main/tardis/tardis/transport/montecarlo/montecarlo_main_loop.py:123: NumbaTypeSafetyWarning:
  
  [1m[1m[1munsafe cast from uint64 to int64. Precision may be lost.[0m[0m[0m

tardis/model/tests/test_base.py: 6 warnings
tardis/model/tests/test_csvy_model.py: 2 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/model/geometry/radial1d.py:50: DeprecationWarning:
  
  v_inner_boundary < 0, assuming default value

tardis/model/tests/test_base.py: 6 warnings
tardis/model/tests/test_csvy_model.py: 2 warnings
tardis/plasma/tests/test_tardis_model_density_config.py: 3 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/model/geometry/radial1d.py:61: DeprecationWarning:
  
  v_outer_boundary < 0, assuming default value

tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_collisional_transitions.py::test_legacy_chianti_collisional_strengths
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_simple[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_empty[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_calculate_level_population_zeros[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/pickle.py:323: DeprecationWarning:
  
  numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.

tardis/plasma/equilibrium/tests/test_level_populations.py::TestLevelPopulationSolver::test_solve[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/equilibrium/level_populations.py:65: FutureWarning:
  
  A value is trying to be set on a copy of a DataFrame or Series through chained assignment using an inplace method.
  The behavior will change in pandas 3.0. This inplace method will never work because the intermediate object on which we are setting values always behaves as a copy.
  
  For example, when doing 'df[col].method(value, inplace=True)', try using 'df.method({col: value}, inplace=True)' or df[col] = df[col].method(value) instead, to perform the operation inplace on the original object.

tardis/plasma/equilibrium/tests/test_rate_matrix.py::test_rate_matrix_solver[collisional_rate_solver0-radiative_transitions0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/tables/atom.py:1279: DeprecationWarning:
  
  numpy.core.numeric is deprecated and has been renamed to numpy._core.numeric. The numpy._core namespace contains private NumPy internals and its use is discouraged, as NumPy internals can change without warning in any release. In practice, most real-world usage of numpy.core is to access functionality in the public NumPy API. If that is the case, use the public NumPy API. If not, you are using NumPy internals. If you would still like to access an internal attribute, use numpy._core.numeric._frombuffer.

tardis/plasma/tests/test_complete_plasmas.py: 20 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "atomic_mass" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues_norm_factor]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues_norm_factor]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "j_blues_norm_factor" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blue_estimator]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blue_estimator]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "j_blue_estimator" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-volume]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-volume]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "volume" not found

tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-r_inner]
tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-r_inner]
  /home/aryaatharva18/tardis-main/tardis/tardis/plasma/tests/test_complete_plasmas.py:197: UserWarning:
  
  Property "r_inner" not found

tardis/plasma/tests/test_nlte_solver.py: 40 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/scipy/sparse/_dia.py:133: UserWarning:
  
  result dtype changed due to the removal of value-based promotion from NumPy. Changed from int64 to int32.

tardis/spectrum/tests/test_cuda_formal_integral.py::test_intensity_black_body_cuda[100000000000000.0-10000.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_trapezoid_integration_cuda[100.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_calculate_z_cuda[formal_integral_geometry0-0.0-0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_populate_z[formal_integral_geometry0-1e-05-0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_line_search_cuda[3000000000000.0]
tardis/spectrum/tests/test_cuda_formal_integral.py::test_reverse_binary_search[3000000000000.0]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numba/cuda/dispatcher.py:536: NumbaPerformanceWarning:
  
  [1mGrid size 1 will likely result in GPU under-utilization due to low occupancy.[0m

tardis/spectrum/tests/test_cuda_formal_integral.py: 47 warnings
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/numba/cuda/cudadrv/devicearray.py:888: NumbaPerformanceWarning:
  
  [1mHost array used in CUDA kernel will incur copy overhead to/from device.[0m

tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[1000.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[10000.0]
tardis/spectrum/tests/test_numba_formal_integral.py::test_trapezoid_integration[100000.0]
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/tests/test_numba_formal_integral.py:35: DeprecationWarning:
  
  `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.

tardis/tests/test_util.py::test_calculate_luminosity[string_io0-100 km-result0]
tardis/tests/test_util.py::test_calculate_luminosity[string_io1-500 km-result1]
  /home/aryaatharva18/tardis-main/tardis/tardis/util/base.py:188: DeprecationWarning:
  
  `trapz` is deprecated. Use `trapezoid` instead, or one of the numerical integration functions in `scipy.integrate`.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:736: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:758: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py: 48 warnings
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:779: DeprecationWarning:
  
  `in1d` is deprecated. Use `np.isin` instead.

tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_mpl_image[plotter_generate_plot_mpl4]
  /home/aryaatharva18/tardis-main/tardis/tardis/visualization/tools/sdec_plot.py:1225: RuntimeWarning:
  
  More than 20 figures have been opened. Figures created through the pyplot interface (`matplotlib.pyplot.figure`) are retained until explicitly closed and may consume too much memory. (To control this warning, see the rcParam `figure.max_open_warning`). Consider using `matplotlib.pyplot.close()`.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(Checkbox).__init__(icon='lock').
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(FloatText).__init__(min=0).
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_custom_abundance.py::TestCustomAbundanceWidget::test_update_input_item_value
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:1385: DeprecationWarning:
  
  Passing unrecognized arguments to super(HTML).__init__(indent=True).
  object.__init__() takes exactly one argument (the instance to initialize)
  This is deprecated in traitlets 4.2.This error will be raised in a future release of traitlets.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/qgrid/grid.py:30: DeprecationWarning:
  
  distutils Version classes are deprecated. Use packaging.version instead.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/ipywidgets/widgets/widget.py:303: DeprecationWarning:
  
  Widget registration using a string name has been deprecated. Widget registration now uses a plain `@register` decorator.

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/traitlets/traitlets.py:553: DeprecationWarning:
  
  metadata {'sync': True} was set from the constructor. With traitlets 4.1, metadata should be set using the .tag() method, e.g., Int().tag(key1='value1', key2='value2')

tardis/visualization/widgets/tests/test_line_info.py::TestLineInfoWidgetData::test_get_species_interactions[wavelength_range0-packet_out_nu]
  /home/aryaatharva18/miniforge3/envs/tardis_numpy/lib/python3.12/site-packages/qgrid/grid.py:827: DeprecationWarning:
  
  QgridWidget._df_changed is deprecated in traitlets 4.1: use @observe and @unobserve instead.

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:289: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->block0_values] [items->Index([0], dtype='int64')]

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/io/util.py:292: PerformanceWarning:
  
  
  your performance may suffer as PyTables will pickle object types that it cannot
  map directly to c-types [inferred_type->mixed,key->values] [items->None]

tardis/visualization/widgets/tests/test_shell_info.py::TestHDFShellInfo::test_shells_data
  /home/aryaatharva18/tardis-main/tardis/tardis/spectrum/formal_integral.py:398: UserWarning:
  
  The number of interpolate_shells was not specified. The value was set to 80.

-- Docs: https://docs.pytest.org/en/stable/how-to/capture-warnings.html
=========================== short test summary info ============================
FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_sobolev_line_opacity
FAILED tardis/opacities/tests/test_tau_sobolev.py::test_calculate_beta_sobolevs
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:nebular-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[ionization:lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[excitation:dilute-lte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-w_epsilon:1e-10-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:detailed-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:blackbody-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[radiative_rates_type:dilute-blackbody-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:scatter-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:macroatom-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[line_interaction_type:downbranch-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:True-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[disable_electron_scattering:False-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'coronal_approximation': True}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I'], 'classical_nebular': True}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-stimulated_emission_factor]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-previous_beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[nlte:{'species': ['He I']}-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_inner:10000 K-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[initial_t_rad:10000 K-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-j_blues]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_lower_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-lines_upper_level_index]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-nu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-wavelength_cm]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-f_lu]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-tau_sobolevs]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-beta_sobolev]
FAILED tardis/plasma/tests/test_complete_plasmas.py::TestPlasma::test_plasma_properties[helium_treatment:recomb-nlte-delta_treatment:0.5-j_blues]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[stimulated_emission_factor]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_lower_level_index]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines_upper_level_index]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[beta_sobolev]
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[lines] - Asser...
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[f_lu] - Assert...
FAILED tardis/plasma/tests/test_hdf_plasma.py::test_hdf_plasma[tau_sobolevs]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3350-3650]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3750]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3850]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2900-3900]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2950-3750]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2950-3850]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[2950-3900]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3050-3750]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3050-3850]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3050-3900]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3150-3750]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3150-3850]
FAILED tardis/plasma/tests/test_plasma_vboundary.py::test_plasma_vboundary[3150-3900]
FAILED tardis/tests/test_tardis_full.py::test_run_tardis_from_config_obj - Fa...
FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop
FAILED tardis/transport/montecarlo/tests/test_montecarlo_main_loop.py::test_montecarlo_main_loop_vpacket_log
FAILED tardis/transport/montecarlo/tests/test_rpacket_tracker.py::test_boundary_interactions
FAILED tardis/transport/montecarlo/tests/test_weighted_packet_source_integration.py::test_montecarlo_main_loop_weighted
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data0-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data1-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data2-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data3-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data4-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data5-plot_colors]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data6-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_data]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_prepare_plot_data[plotter_prepare_plot_data7-plot_colors]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl0]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl1]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl4]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl5]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_mpl[plotter_generate_plot_mpl7]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply0]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply1]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply4]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply5]
FAILED tardis/visualization/tools/tests/test_liv_plot.py::TestLIVPlotter::test_generate_plot_ply[plotter_generate_plot_ply7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data0]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data1]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data2]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data3]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data4]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data5]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data6]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data8]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data9]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data10]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data11]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data12]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data13]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data14]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_calculate_plotting_data[plotter_calculate_plotting_data15]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply0]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply1]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply2]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply3]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply4]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply5]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply6]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply7]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply8]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply9]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply10]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply11]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply12]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply13]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply14]
FAILED tardis/visualization/tools/tests/test_sdec_plot.py::TestSDECPlotter::test_generate_plot_mpl[plotter_generate_plot_ply15]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_w]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_rad]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_electron_densities]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_iterations[iterations_t_inner]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[nu_bar_estimator]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[j_estimator]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[t_radiative]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[dilution_factor]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_nus]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_estimates[output_energies]
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_storer_store
ERROR tardis/simulation/tests/test_simulation.py::test_plasma_state_storer_reshape
ERROR tardis/simulation/tests/test_simulation.py::test_version_tag - OSError:...
ERROR tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_initialization
ERROR tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets
ERROR tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_spectrum_real_packets_reabsorbed
ERROR tardis/spectrum/tests/test_spectrum_solver.py::TestSpectrumSolver::test_solve
ERROR tardis/tests/test_tardis_full.py::TestTransportSimple::test_j_blue_estimators
ERROR tardis/tests/test_tardis_full.py::TestTransportSimple::test_spectrum - ...
ERROR tardis/tests/test_tardis_full.py::TestTransportSimple::test_virtual_spectrum
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_simulation[-1-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_simulation[-1-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[-1-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[-1-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[-1-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_simulation[30-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-macroatom]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_simulation[30-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_j_blue_estimators[30-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum[30-downbranch]
ERROR tardis/tests/test_tardis_full_formal_integral.py::TestTransportSimpleFormalIntegral::test_spectrum_integrated[30-downbranch]
= 264 failed, 1185 passed, 282 skipped, 2 deselected, 19 xfailed, 8 xpassed, 665 warnings, 36 errors in 730.44s (0:12:10) =
