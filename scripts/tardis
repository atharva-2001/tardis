#!/usr/bin/env python

from tardis import simulation, atomic, config

import sqlite3
import logging
import argparse
import os
import pickle



tardis_description =\
"""TARDIS Supernova Montecarlo Radiative transfer code

Helper programs
---------------
tardis_write_config - Write default(example) configuration file for use with tardis
"""

parser = argparse.ArgumentParser(description=tardis_description)
argparse.ArgumentParser()
parser.add_argument('config_file')
parser.add_argument('result_file')
parser.add_argument('-atomic_db', default='~/.tardis/atomic_db.db3')
parser.add_argument('-log_file', default=None)
parser.add_argument('-packet_log_file', default=None)

args = parser.parse_args()

packet_logging_fname = 'tardis_packets.log'

logger = logging.getLogger('tardis')
logger.setLevel(logging.DEBUG)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.DEBUG)
console_formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(console_formatter)
logger.addHandler(console_handler)

logger = logging.getLogger('tardis_packet_logger')
logger.setLevel(logging.DEBUG)
packet_logging_handler = logging.FileHandler(packet_logging_fname, mode='w')
packet_logging_handler.setLevel(logging.DEBUG)
packet_logging_formatter = logging.Formatter('%(name)s - %(levelname)s - %(message)s')
console_handler.setFormatter(packet_logging_formatter)
logger.addHandler(packet_logging_handler)

conn = sqlite3.connect(os.path.expanduser(args.atomic_db), detect_types=sqlite3.PARSE_DECLTYPES)

atomic_model = atomic.CombinedAtomicModel.from_db(conn)
config_dict = config.read_uniform_abundance_config(args.config_file)

result = simulation.run_multizone(config_dict, atomic_model)

pickle.dump(result, file(args.result_file, 'w'))